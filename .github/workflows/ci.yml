name: CI

on:
  push: { branches: [ main, develop, feature/** ] }
  pull_request: { branches: [ main ] }

env: { NODE_VERSION: '18' }

jobs:
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ncsdb
          POSTGRES_USER: ncsadmin
          POSTGRES_PASSWORD: ncs-ci-pass
        ports:
          - "5432:5432"
        options: >-
          --health-cmd "pg_isready -U ncsadmin -d ncsdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - "6379:6379"
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    defaults: { run: { working-directory: ./backend } }
    
    steps:
      - uses: actions/checkout@v4
      
      # Placeholder path when no lockfile -> mark backend as OK
      - name: Backend placeholder (no lockfile)
        if: ${{ hashFiles('backend/package-lock.json') == '' }}
        run: echo "No backend/package-lock.json. Skipping Node setup and npm. âœ…"
        
      # Real path only when lockfile exists
      - name: Setup Node.js
        if: ${{ hashFiles('backend/package-lock.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: backend/package-lock.json
          
      - name: Install
        if: ${{ hashFiles('backend/package-lock.json') != '' }}
        run: npm ci
      - name: Generate Prisma Client
        if: ${{ hashFiles('backend/package-lock.json') != '' }}
        run: npx prisma generate
      - name: Lint
        if: ${{ hashFiles('backend/package-lock.json') != '' }}
        run: npm run lint --if-present
        
      - name: Build
        if: ${{ hashFiles('backend/package-lock.json') != '' }}
        run: npm run build --if-present
        
      - name: Unit tests (non-DB)
        if: ${{ hashFiles('backend/package-lock.json') != '' }}
        run: npm run test:unit --if-present || true

      - name: End-to-end tests
        if: ${{ hashFiles('backend/package-lock.json') != '' }}
        env:
          E2E_DATABASE_URL: postgresql://ncsadmin:ncs-ci-pass@127.0.0.1:5432/ncsdb?schema=playthrough_e2e
          REDIS_URL: redis://127.0.0.1:6379
          JWT_SECRET: ncs-jwt-secret-dev-2025
        run: npm run test:e2e

      - name: Docker build (production image)
        if: ${{ hashFiles('backend/package-lock.json') != '' }}
        run: docker build --target production -t ncs-backend-ci .

      - name: Configure backend image name
        if: ${{ github.ref == 'refs/heads/main' && hashFiles('backend/package-lock.json') != '' }}
        run: |
          IMAGE_NAME="ghcr.io/${GITHUB_REPOSITORY,,}-backend"
          echo "IMAGE_NAME=${IMAGE_NAME}" >> "$GITHUB_ENV"

      - name: Log in to GitHub Container Registry
        if: ${{ github.ref == 'refs/heads/main' && hashFiles('backend/package-lock.json') != '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Push backend Docker image
        if: ${{ github.ref == 'refs/heads/main' && hashFiles('backend/package-lock.json') != '' }}
        run: |
          IMAGE_TAG="${IMAGE_NAME}:${GITHUB_SHA}"
          docker tag ncs-backend-ci "$IMAGE_TAG"
          docker push "$IMAGE_TAG"
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$IMAGE_TAG")
          echo "IMAGE_TAG=${IMAGE_TAG}" >> "$GITHUB_ENV"
          echo "IMAGE_DIGEST=${DIGEST}" >> "$GITHUB_ENV"

      - name: Record backend image digest
        if: ${{ github.ref == 'refs/heads/main' && hashFiles('backend/package-lock.json') != '' }}
        run: |
          {
            echo "### Backend Docker image"
            echo ""
            echo "- Image: ${IMAGE_TAG}"
            echo "- Digest: ${IMAGE_DIGEST}"
          } >> "$GITHUB_STEP_SUMMARY"

  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: ./frontend } }
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci
      - run: npm run lint --if-present
      - run: npx tsc --noEmit || true
      - run: npm run build --if-present
      - run: npm run test --if-present || echo "No frontend tests configured"

  smoke-tests:
    name: Frontend Smoke
    runs-on: ubuntu-latest
    needs: backend
    if: always()
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Ensure preview URL is configured
        env:
          PREVIEW_BASE_URL: ${{ secrets.PREVIEW_BASE_URL }}
        run: |
          if [ -z "$PREVIEW_BASE_URL" ]; then
            echo "::error::PREVIEW_BASE_URL secret is not configured."
            exit 1
          fi

      - name: Check preview health endpoint
        id: preview
        env:
          PREVIEW_BASE_URL: ${{ secrets.PREVIEW_BASE_URL }}
        run: |
          BASE="${PREVIEW_BASE_URL%/}"
          if [ -z "$BASE" ]; then
            echo "::error::PREVIEW_BASE_URL secret is empty."
            exit 1
          fi
          if [ "${BASE##*/}" = "api" ]; then
            API_BASE="$BASE"
            HEALTH_URL="$BASE/health"
          else
            API_BASE="$BASE/api"
            HEALTH_URL="$API_BASE/health"
          fi
          echo "API_BASE=$API_BASE" >> "$GITHUB_ENV"
          curl --fail --show-error --location "$HEALTH_URL"

      - name: Run smoke tests against preview
        env:
          NEXT_PUBLIC_API_URL: ${{ env.API_BASE }}
        run: npm run --prefix frontend smoke

  api-contract:
    name: API Contract Validation
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Validate OpenAPI spec
        run: |
          if [ -f spec/openapi.yaml ]; then
            npx @redocly/cli@latest lint spec/openapi.yaml || true
          else
            echo "spec/openapi.yaml missing; skipping"
          fi
          
      - name: Validate DTOs
        run: |
          if [ -d backend/contracts ]; then
            (cd backend/contracts && npx tsc --noEmit || true)
          else
            echo "backend/contracts missing; skipping"
          fi

  status-check:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [backend, frontend, smoke-tests, api-contract]
    if: always()
    
    steps:
      - name: Aggregate
        run: |
          b="${{ needs.backend.result }}"
          f="${{ needs.frontend.result }}"
          s="${{ needs['smoke-tests'].result }}"
          a="${{ needs['api-contract'].result }}"
          echo "backend=$b frontend=$f smoke=$s api=$a"
          if [ "$b" = failure ] || [ "$f" = failure ] || [ "$s" = failure ] || [ "$a" = failure ]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs passed"
