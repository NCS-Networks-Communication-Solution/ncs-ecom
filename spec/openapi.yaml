openapi: 3.0.3
info:
  title: NCS B2B E-Commerce API
  description: |
    NCS Networks B2B e-commerce platform API (modular monolith).
    Supports bilingual (Thai/English), RFQ workflows, PromptPay QR payments, and Thai tax invoices.
  version: 0.1.0
  contact:
    name: NCS Networks API Support
    email: api@ncs.co.th
  
servers:
  - url: http://localhost:3000/api
    description: Development
  - url: https://api.ncs.co.th
    description: Production

tags:
  - name: auth
    description: Authentication and authorization
  - name: catalog
    description: Product catalog and categories
  - name: cart
    description: Shopping cart management
  - name: rfq
    description: RFQ and quote workflows
  - name: orders
    description: Order management
  - name: payments
    description: Payment processing
  - name: invoices
    description: Tax invoice generation

security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      tags: [auth]
      summary: Register new user
      operationId: register
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        409:
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      tags: [auth]
      summary: User login
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags: [auth]
      summary: Refresh access token
      operationId: refreshToken
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
      responses:
        200:
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

  /products:
    get:
      tags: [catalog]
      summary: List products
      operationId: listProducts
      security: []
      parameters:
        - name: search
          in: query
          schema:
            type: string
          description: Search by name or SKU
        - name: categoryId
          in: query
          schema:
            type: string
            format: uuid
        - name: minPrice
          in: query
          schema:
            type: number
        - name: maxPrice
          in: query
          schema:
            type: number
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        200:
          description: Product list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'

  /products/{id}:
    get:
      tags: [catalog]
      summary: Get product details
      operationId: getProduct
      security: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          $ref: '#/components/responses/NotFound'

  /categories:
    get:
      tags: [catalog]
      summary: List categories
      operationId: listCategories
      security: []
      parameters:
        - name: parentId
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by parent category
      responses:
        200:
          description: Category list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

  /cart:
    get:
      tags: [cart]
      summary: Get current cart
      operationId: getCart
      responses:
        200:
          description: Cart contents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
    
    delete:
      tags: [cart]
      summary: Clear cart
      operationId: clearCart
      responses:
        204:
          description: Cart cleared

  /cart/items:
    post:
      tags: [cart]
      summary: Add item to cart
      operationId: addToCart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToCartRequest'
      responses:
        200:
          description: Item added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        400:
          $ref: '#/components/responses/BadRequest'

  /cart/items/{itemId}:
    patch:
      tags: [cart]
      summary: Update cart item quantity
      operationId: updateCartItem
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [quantity]
              properties:
                quantity:
                  type: integer
                  minimum: 1
      responses:
        200:
          description: Item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
    
    delete:
      tags: [cart]
      summary: Remove item from cart
      operationId: removeFromCart
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Item removed

  /cart/bulk-import:
    post:
      tags: [cart]
      summary: Import cart items from CSV
      operationId: bulkImportCart
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
                  description: CSV file with columns productId,quantity
      responses:
        200:
          description: Items imported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkImportResult'
        400:
          $ref: '#/components/responses/BadRequest'

  /quotes:
    get:
      tags: [rfq]
      summary: List quotes
      operationId: listQuotes
      parameters:
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/QuoteStatus'
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        200:
          description: Quote list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteList'
    
    post:
      tags: [rfq]
      summary: Create RFQ from cart
      operationId: createQuote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQuoteRequest'
      responses:
        201:
          description: Quote created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
        400:
          $ref: '#/components/responses/BadRequest'

  /quotes/{id}:
    get:
      tags: [rfq]
      summary: Get quote details
      operationId: getQuote
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Quote details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
        404:
          $ref: '#/components/responses/NotFound'
    
    patch:
      tags: [rfq]
      summary: Update quote (admin)
      operationId: updateQuote
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateQuoteRequest'
      responses:
        200:
          description: Quote updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'

  /quotes/{id}/accept:
    post:
      tags: [rfq]
      summary: Accept quote (customer)
      operationId: acceptQuote
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                poNumber:
                  type: string
                  description: Customer PO number
      responses:
        200:
          description: Quote accepted, order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'

  /orders:
    get:
      tags: [orders]
      summary: List orders
      operationId: listOrders
      parameters:
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/OrderStatus'
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        200:
          description: Order list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'

  /orders/{id}:
    get:
      tags: [orders]
      summary: Get order details
      operationId: getOrder
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        404:
          $ref: '#/components/responses/NotFound'

  /orders/{id}/payment:
    post:
      tags: [payments]
      summary: Initiate payment
      operationId: initiatePayment
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        200:
          description: Payment initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        400:
          $ref: '#/components/responses/BadRequest'

  /payments/webhook/promptpay:
    post:
      tags: [payments]
      summary: PromptPay webhook
      operationId: promptpayWebhook
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptPayWebhook'
      responses:
        200:
          description: Webhook processed
        400:
          $ref: '#/components/responses/BadRequest'

  /payments/{id}/upload-slip:
    post:
      tags: [payments]
      summary: Upload bank transfer slip
      operationId: uploadPaymentSlip
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: Slip uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        400:
          $ref: '#/components/responses/BadRequest'

  /orders/{id}/invoice:
    get:
      tags: [invoices]
      summary: Get tax invoice PDF
      operationId: getInvoice
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Tax invoice PDF
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        404:
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Error:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: Invalid input data
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

    RegisterRequest:
      type: object
      required: [email, password, name, companyId]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
        name:
          type: string
        companyId:
          type: string
          format: uuid
        role:
          $ref: '#/components/schemas/UserRole'

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    AuthResponse:
      type: object
      required: [accessToken, refreshToken, user]
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
          description: Seconds until token expiry
        user:
          $ref: '#/components/schemas/User'

    User:
      type: object
      required: [id, email, name, role, companyId]
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
        companyId:
          type: string
          format: uuid
        company:
          $ref: '#/components/schemas/Company'

    UserRole:
      type: string
      enum: [ADMIN, PURCHASER, VIEWER, SALES]

    Company:
      type: object
      required: [id, name, tier]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        taxId:
          type: string
        tier:
          type: string
          enum: [STANDARD, BRONZE, SILVER, GOLD]
        createdAt:
          type: string
          format: date-time

    Category:
      type: object
      required: [id, nameEn, nameTh]
      properties:
        id:
          type: string
          format: uuid
        nameEn:
          type: string
        nameTh:
          type: string
        parentId:
          type: string
          format: uuid
        level:
          type: integer
        productCount:
          type: integer

    Product:
      type: object
      required: [id, sku, nameEn, nameTh, price, stock, categoryId]
      properties:
        id:
          type: string
          format: uuid
        sku:
          type: string
        nameEn:
          type: string
        nameTh:
          type: string
        descriptionEn:
          type: string
        descriptionTh:
          type: string
        price:
          type: number
          format: decimal
        stock:
          type: integer
        categoryId:
          type: string
          format: uuid
        category:
          $ref: '#/components/schemas/Category'
        specifications:
          type: object
          additionalProperties: true
        images:
          type: array
          items:
            type: string
            format: uri

    ProductList:
      type: object
      required: [items, total, page, limit]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer
        hasMore:
          type: boolean

    Cart:
      type: object
      required: [id, items, subtotal, tax, total]
      properties:
        id:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        subtotal:
          type: number
          format: decimal
        tax:
          type: number
          format: decimal
        total:
          type: number
          format: decimal
        itemCount:
          type: integer

    CartItem:
      type: object
      required: [id, productId, quantity, unitPrice, total]
      properties:
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          minimum: 1
        unitPrice:
          type: number
          format: decimal
        total:
          type: number
          format: decimal

    AddToCartRequest:
      type: object
      required: [productId, quantity]
      properties:
        productId:
          type: string
          format: uuid
        quantity:
          type: integer
          minimum: 1

    BulkImportResult:
      type: object
      required: [success, failed, cart]
      properties:
        success:
          type: integer
        failed:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              row:
                type: integer
              error:
                type: string
        cart:
          $ref: '#/components/schemas/Cart'

    CreateQuoteRequest:
      type: object
      properties:
        notes:
          type: string
        requestedDeliveryDate:
          type: string
          format: date

    Quote:
      type: object
      required: [id, quoteNumber, status, items, subtotal, tax, total, createdAt]
      properties:
        id:
          type: string
          format: uuid
        quoteNumber:
          type: string
        status:
          $ref: '#/components/schemas/QuoteStatus'
        items:
          type: array
          items:
            $ref: '#/components/schemas/QuoteItem'
        subtotal:
          type: number
          format: decimal
        tax:
          type: number
          format: decimal
        total:
          type: number
          format: decimal
        validUntil:
          type: string
          format: date
        notes:
          type: string
        adminNotes:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    QuoteStatus:
      type: string
      enum: [PENDING, SENT, ACCEPTED, REJECTED, EXPIRED]

    QuoteItem:
      type: object
      required: [id, productId, quantity, unitPrice, total]
      properties:
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
        unitPrice:
          type: number
          format: decimal
        discountPercent:
          type: number
        total:
          type: number
          format: decimal

    QuoteList:
      type: object
      required: [items, total, page, limit]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Quote'
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer

    UpdateQuoteRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/QuoteStatus'
        items:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              unitPrice:
                type: number
                format: decimal
              discountPercent:
                type: number
        adminNotes:
          type: string
        validUntil:
          type: string
          format: date

    Order:
      type: object
      required: [id, orderNumber, status, items, subtotal, tax, total, createdAt]
      properties:
        id:
          type: string
          format: uuid
        orderNumber:
          type: string
        quoteId:
          type: string
          format: uuid
        poNumber:
          type: string
        status:
          $ref: '#/components/schemas/OrderStatus'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        subtotal:
          type: number
          format: decimal
        tax:
          type: number
          format: decimal
        total:
          type: number
          format: decimal
        payment:
          $ref: '#/components/schemas/Payment'
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        createdAt:
          type: string
          format: date-time
        paidAt:
          type: string
          format: date-time
        shippedAt:
          type: string
          format: date-time

    OrderStatus:
      type: string
      enum: [PENDING, PAID, PROCESSING, SHIPPED, DELIVERED, CANCELLED]

    OrderItem:
      type: object
      required: [id, productId, quantity, unitPrice, total]
      properties:
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
        unitPrice:
          type: number
          format: decimal
        total:
          type: number
          format: decimal

    OrderList:
      type: object
      required: [items, total, page, limit]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer

    PaymentRequest:
      type: object
      required: [method]
      properties:
        method:
          $ref: '#/components/schemas/PaymentMethod'
        returnUrl:
          type: string
          format: uri

    PaymentMethod:
      type: string
      enum: [PROMPTPAY, BANK_TRANSFER, CREDIT_CARD, E_WALLET]

    PaymentResponse:
      type: object
      required: [paymentId, method, status]
      properties:
        paymentId:
          type: string
          format: uuid
        method:
          $ref: '#/components/schemas/PaymentMethod'
        status:
          $ref: '#/components/schemas/PaymentStatus'
        qrCode:
          type: string
          description: Base64 encoded QR code for PromptPay
        bankAccount:
          $ref: '#/components/schemas/BankAccount'
        amount:
          type: number
          format: decimal

    Payment:
      type: object
      required: [id, orderId, method, status, amount, createdAt]
      properties:
        id:
          type: string
          format: uuid
        orderId:
          type: string
          format: uuid
        method:
          $ref: '#/components/schemas/PaymentMethod'
        status:
          $ref: '#/components/schemas/PaymentStatus'
        amount:
          type: number
          format: decimal
        transactionId:
          type: string
        slipUrl:
          type: string
          format: uri
        createdAt:
          type: string
          format: date-time
        paidAt:
          type: string
          format: date-time

    PaymentStatus:
      type: string
      enum: [PENDING, PROCESSING, COMPLETED, FAILED, CANCELLED]

    PromptPayWebhook:
      type: object
      required: [transactionId, amount, status]
      properties:
        transactionId:
          type: string
        amount:
          type: number
          format: decimal
        status:
          type: string
        timestamp:
          type: string
          format: date-time

    BankAccount:
      type: object
      required: [bankName, accountName, accountNumber]
      properties:
        bankName:
          type: string
        accountName:
          type: string
        accountNumber:
          type: string
        branch:
          type: string

    Address:
      type: object
      required: [addressLine1, subDistrict, district, province, postalCode, country]
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        subDistrict:
          type: string
        district:
          type: string
        province:
          type: string
        postalCode:
          type: string
        country:
          type: string
          default: TH