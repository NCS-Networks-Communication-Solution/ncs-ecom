generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model carts {
  id        String   @id
  userId    String   @map("user_id")
  productId String   @map("product_id")
  quantity  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  products  products @relation(fields: [productId], references: [id])
  users     users    @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@map("carts")
}

model categories {
  id          String     @id
  name        String     @unique
  nameEn      String     @map("name_en")
  nameTh      String     @map("name_th")
  description String?
  createdAt   DateTime   @default(now()) @map("created_at")
  products    products[]

  @@map("categories")
}

model companies {
  id        String   @id
  name      String   @unique
  taxId     String?  @unique @map("tax_id")
  tier      String   @default("STANDARD")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  orders    orders[]
  quotes    quotes[]
  users     users[]

  @@map("companies")
}

model order_items {
  id        String   @id
  orderId   String   @map("order_id")
  productId String   @map("product_id")
  quantity  Int
  unitPrice Decimal  @map("unit_price") @db.Decimal(12, 2)
  orders    orders   @relation(fields: [orderId], references: [id])
  products  products @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model orders {
  id         String      @id
  orderNo    String      @unique @map("order_no")
  companyId  String      @map("company_id")
  userId     String      @map("user_id")
  quoteId    String?     @unique @map("quote_id")
  status     OrderStatus @default(PENDING)
  total      Decimal     @db.Decimal(12, 2)
  poNumber   String?     @map("po_number")
  createdAt  DateTime    @default(now()) @map("created_at")
  orderItems order_items[]
  companies  companies   @relation(fields: [companyId], references: [id])
  quotes     quotes?     @relation(fields: [quoteId], references: [id])
  users      users       @relation(fields: [userId], references: [id])
  payments   payments?

  @@map("orders")
}

model payments {
  id             String  @id
  orderId        String  @unique @map("order_id")
  method         String
  status         String  @default("PENDING")
  amount         Decimal @db.Decimal(12, 2)
  transactionId  String? @map("transaction_id")
  paymentSlipUrl String? @map("payment_slip_url")
  promptpayQr    String? @map("promptpay_qr")
  createdAt      DateTime @default(now()) @map("created_at")
  orders         orders  @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model products {
  id          String     @id
  sku         String     @unique
  nameEn      String     @map("name_en")
  nameTh      String     @map("name_th")
  description String?
  price       Decimal    @db.Decimal(12, 2)
  stock       Int        @default(0)
  categoryId  String     @map("category_id")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @map("updated_at")
  carts       carts[]
  orderItems  order_items[]
  categories  categories @relation(fields: [categoryId], references: [id])
  quoteItems  quote_items[]

  @@map("products")
}

model quote_items {
  id        String   @id
  quoteId   String   @map("quote_id")
  productId String   @map("product_id")
  quantity  Int
  unitPrice Decimal  @map("unit_price") @db.Decimal(12, 2)
  products  products @relation(fields: [productId], references: [id])
  quotes    quotes   @relation(fields: [quoteId], references: [id])

  @@map("quote_items")
}

model quotes {
  id         String      @id
  quoteNo    String      @unique @map("quote_no")
  companyId  String      @map("company_id")
  userId     String      @map("user_id")
  status     QuoteStatus @default(PENDING)
  total      Decimal     @db.Decimal(12, 2)
  validUntil DateTime    @map("valid_until")
  createdAt  DateTime    @default(now()) @map("created_at")
  orders     orders?
  quoteItems quote_items[]
  companies  companies   @relation(fields: [companyId], references: [id])
  users      users       @relation(fields: [userId], references: [id])

  @@map("quotes")
}

model users {
  id        String    @id
  email     String    @unique
  password  String
  name      String
  role      Role      @default(USER)
  companyId String    @map("company_id")
  createdAt DateTime  @default(now()) @map("created_at")
  isActive  Boolean   @default(true) @map("is_active")
  carts     carts[]
  orders    orders[]
  quotes    quotes[]
  companies companies @relation(fields: [companyId], references: [id])
  refreshTokens refresh_tokens[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
  PURCHASER
  APPROVER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum QuoteStatus {
  PENDING
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

model refresh_tokens {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  tokenHash  String   @map("token_hash")
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@unique([tokenHash])
  @@map("refresh_tokens")
}
