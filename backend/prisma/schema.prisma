generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model carts {
  id         String   @id
  user_id    String
  product_id String
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime
  products   products @relation(fields: [product_id], references: [id])
  users      users    @relation(fields: [user_id], references: [id])

  @@unique([user_id, product_id])
}

model categories {
  id          String     @id
  name        String     @unique
  name_en     String
  name_th     String
  description String?
  created_at  DateTime   @default(now())
  products    products[]
}

model companies {
  id         String   @id
  name       String   @unique
  tax_id     String?  @unique
  tier       String   @default("STANDARD")
  created_at DateTime @default(now())
  updated_at DateTime
  orders     orders[]
  quotes     quotes[]
  users      users[]
}

model order_items {
  id         String   @id
  order_id   String
  product_id String
  quantity   Int
  unit_price Decimal  @db.Decimal(12, 2)
  orders     orders   @relation(fields: [order_id], references: [id])
  products   products @relation(fields: [product_id], references: [id])
}

model orders {
  id          String        @id
  order_no    String        @unique
  company_id  String
  user_id     String
  quote_id    String?       @unique
  status      OrderStatus   @default(PENDING)
  total       Decimal       @db.Decimal(12, 2)
  po_number   String?
  created_at  DateTime      @default(now())
  order_items order_items[]
  companies   companies     @relation(fields: [company_id], references: [id])
  quotes      quotes?       @relation(fields: [quote_id], references: [id])
  users       users         @relation(fields: [user_id], references: [id])
  payments    payments?
}

model payments {
  id               String   @id
  order_id         String   @unique
  method           String
  status           String   @default("PENDING")
  amount           Decimal  @db.Decimal(12, 2)
  transaction_id   String?
  payment_slip_url String?
  promptpay_qr     String?
  created_at       DateTime @default(now())
  orders           orders   @relation(fields: [order_id], references: [id])
}

model products {
  id          String        @id
  sku         String        @unique
  name_en     String
  name_th     String
  description String?
  price       Decimal       @db.Decimal(12, 2)
  stock       Int           @default(0)
  category_id String
  created_at  DateTime      @default(now())
  updated_at  DateTime
  carts       carts[]
  order_items order_items[]
  categories  categories    @relation(fields: [category_id], references: [id])
  quote_items quote_items[]
}

model quote_items {
  id         String   @id
  quote_id   String
  product_id String
  quantity   Int
  unit_price Decimal  @db.Decimal(12, 2)
  products   products @relation(fields: [product_id], references: [id])
  quotes     quotes   @relation(fields: [quote_id], references: [id])
}

model quotes {
  id          String        @id
  quote_no    String        @unique
  company_id  String
  user_id     String
  status      QuoteStatus   @default(PENDING)
  total       Decimal       @db.Decimal(12, 2)
  valid_until DateTime
  created_at  DateTime      @default(now())
  orders      orders?
  quote_items quote_items[]
  companies   companies     @relation(fields: [company_id], references: [id])
  users       users         @relation(fields: [user_id], references: [id])
}

model users {
  id         String    @id
  email      String    @unique
  password   String
  name       String
  role       Role      @default(USER)
  company_id String
  created_at DateTime  @default(now())
  carts      carts[]
  orders     orders[]
  quotes     quotes[]
  companies  companies @relation(fields: [company_id], references: [id])
}

enum Role {
  USER
  ADMIN
  PURCHASER
  APPROVER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum QuoteStatus {
  PENDING
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}
