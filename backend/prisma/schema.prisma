// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(uuid())
  name      String   @unique
  taxId     String?  @unique @map("tax_id")
  tier      String   @default("STANDARD")
  users     User[]
  orders    Order[]
  quotes    Quote[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("companies")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  name       String
  role       Role     @default(USER)
  companyId  String   @map("company_id")
  company    Company  @relation(fields: [companyId], references: [id])
  orders     Order[]
  quotes     Quote[]
  carts      Cart[]
  createdAt  DateTime @default(now()) @map("created_at")
  
  @@map("users")
}

enum Role {
  USER
  ADMIN
  PURCHASER
  APPROVER
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  nameEn      String    @map("name_en")
  nameTh      String    @map("name_th")
  description String?
  products    Product[]
  createdAt   DateTime  @default(now()) @map("created_at")
  
  @@map("categories")
}

model Product {
  id          String      @id @default(uuid())
  sku         String      @unique
  nameEn      String      @map("name_en")
  nameTh      String      @map("name_th")
  description String?
  price       Decimal     @db.Decimal(12, 2)
  stock       Int         @default(0)
  categoryId  String      @map("category_id")
  category    Category    @relation(fields: [categoryId], references: [id])
  cartItems   Cart[]
  orderItems  OrderItem[]
  quoteItems  QuoteItem[]
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  @@map("products")
}

model Cart {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@unique([userId, productId])
  @@map("carts")
}

model Quote {
  id        String      @id @default(uuid())
  quoteNo   String      @unique @map("quote_no")
  companyId String      @map("company_id")
  company   Company     @relation(fields: [companyId], references: [id])
  userId    String      @map("user_id")
  user      User        @relation(fields: [userId], references: [id])
  status    QuoteStatus @default(PENDING)
  total     Decimal     @db.Decimal(12, 2)
  items     QuoteItem[]
  order     Order?
  validUntil DateTime   @map("valid_until")
  createdAt DateTime    @default(now()) @map("created_at")
  
  @@map("quotes")
}

model QuoteItem {
  id        String  @id @default(uuid())
  quoteId   String  @map("quote_id")
  quote     Quote   @relation(fields: [quoteId], references: [id])
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  unitPrice Decimal @db.Decimal(12, 2) @map("unit_price")
  
  @@map("quote_items")
}

enum QuoteStatus {
  PENDING
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

model Order {
  id        String      @id @default(uuid())
  orderNo   String      @unique @map("order_no")
  companyId String      @map("company_id")
  company   Company     @relation(fields: [companyId], references: [id])
  userId    String      @map("user_id")
  user      User        @relation(fields: [userId], references: [id])
  quoteId   String?     @unique @map("quote_id")
  quote     Quote?      @relation(fields: [quoteId], references: [id])
  status    OrderStatus @default(PENDING)
  total     Decimal     @db.Decimal(12, 2)
  items     OrderItem[]
  payment   Payment?
  poNumber  String?     @map("po_number")
  createdAt DateTime    @default(now()) @map("created_at")
  
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  @map("order_id")
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  unitPrice Decimal @db.Decimal(12, 2) @map("unit_price")
  
  @@map("order_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Payment {
  id              String   @id @default(uuid())
  orderId         String   @unique @map("order_id")
  order           Order    @relation(fields: [orderId], references: [id])
  method          String
  status          String   @default("PENDING")
  amount          Decimal  @db.Decimal(12, 2)
  transactionId   String?  @map("transaction_id")
  paymentSlipUrl  String?  @map("payment_slip_url")
  promptpayQr     String?  @map("promptpay_qr")
  createdAt       DateTime @default(now()) @map("created_at")
  
  @@map("payments")
}
