e11f5fba3ac15b9d98140c54b07295f0
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const products_service_1 = require("./products.service");
const prisma_service_1 = require("../prisma.service");
describe('ProductsService', () => {
    let service;
    const mockPrismaService = {
        $transaction: jest.fn(async (actions) => Promise.all(actions)),
        products: {
            findMany: jest.fn(() => []),
            findUnique: jest.fn(() => ({ id: '1', nameEn: 'Test Product' })),
            create: jest.fn(() => ({ id: '1', nameEn: 'New Product' })),
            update: jest.fn(() => ({ id: '1', nameEn: 'Updated Product' })),
            delete: jest.fn(() => ({ id: '1' })),
            count: jest.fn(() => 0),
        },
        categories: {
            findUnique: jest.fn(() => ({ id: '1', name: 'Category' })),
        },
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                products_service_1.ProductsService,
                {
                    provide: prisma_service_1.PrismaService,
                    useValue: mockPrismaService,
                },
            ],
        }).compile();
        service = module.get(products_service_1.ProductsService);
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    it('should find all products', async () => {
        await expect(service.findAll()).resolves.toEqual({
            items: [],
            total: 0,
            page: 1,
            limit: 20,
            hasMore: false,
        });
        expect(mockPrismaService.products.findMany).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3BrYWV3bWFuZWUvRGVza3RvcC9Qcm9qZWN0X0hpcm9zaGltYS9uY3MtZWNvbS9iYWNrZW5kL3NyYy9wcm9kdWN0cy9wcm9kdWN0cy5zZXJ2aWNlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBc0Q7QUFDdEQseURBQXFEO0FBQ3JELHNEQUFrRDtBQUVsRCxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLElBQUksT0FBd0IsQ0FBQztJQUU3QixNQUFNLGlCQUFpQixHQUFHO1FBQ3hCLFlBQVksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxPQUFjLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckUsUUFBUSxFQUFFO1lBQ1IsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQzNCLFVBQVUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO1lBQ2hFLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO1lBQzNELE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUM7WUFDL0QsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ3BDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUN4QjtRQUNELFVBQVUsRUFBRTtZQUNWLFVBQVUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1NBQzNEO0tBQ0YsQ0FBQztJQUVGLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixNQUFNLE1BQU0sR0FBa0IsTUFBTSxjQUFJLENBQUMsbUJBQW1CLENBQUM7WUFDM0QsU0FBUyxFQUFFO2dCQUNULGtDQUFlO2dCQUNmO29CQUNFLE9BQU8sRUFBRSw4QkFBYTtvQkFDdEIsUUFBUSxFQUFFLGlCQUFpQjtpQkFDNUI7YUFDRjtTQUNGLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUViLE9BQU8sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFrQixrQ0FBZSxDQUFDLENBQUM7SUFDekQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO1FBQzNCLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNoQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywwQkFBMEIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN4QyxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1lBQy9DLEtBQUssRUFBRSxFQUFFO1lBQ1QsS0FBSyxFQUFFLENBQUM7WUFDUixJQUFJLEVBQUUsQ0FBQztZQUNQLEtBQUssRUFBRSxFQUFFO1lBQ1QsT0FBTyxFQUFFLEtBQUs7U0FDZixDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDakUsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvcGthZXdtYW5lZS9EZXNrdG9wL1Byb2plY3RfSGlyb3NoaW1hL25jcy1lY29tL2JhY2tlbmQvc3JjL3Byb2R1Y3RzL3Byb2R1Y3RzLnNlcnZpY2Uuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXN0LCBUZXN0aW5nTW9kdWxlIH0gZnJvbSAnQG5lc3Rqcy90ZXN0aW5nJztcbmltcG9ydCB7IFByb2R1Y3RzU2VydmljZSB9IGZyb20gJy4vcHJvZHVjdHMuc2VydmljZSc7XG5pbXBvcnQgeyBQcmlzbWFTZXJ2aWNlIH0gZnJvbSAnLi4vcHJpc21hLnNlcnZpY2UnO1xuXG5kZXNjcmliZSgnUHJvZHVjdHNTZXJ2aWNlJywgKCkgPT4ge1xuICBsZXQgc2VydmljZTogUHJvZHVjdHNTZXJ2aWNlO1xuXG4gIGNvbnN0IG1vY2tQcmlzbWFTZXJ2aWNlID0ge1xuICAgICR0cmFuc2FjdGlvbjogamVzdC5mbihhc3luYyAoYWN0aW9uczogYW55W10pID0+IFByb21pc2UuYWxsKGFjdGlvbnMpKSxcbiAgICBwcm9kdWN0czoge1xuICAgICAgZmluZE1hbnk6IGplc3QuZm4oKCkgPT4gW10pLFxuICAgICAgZmluZFVuaXF1ZTogamVzdC5mbigoKSA9PiAoeyBpZDogJzEnLCBuYW1lRW46ICdUZXN0IFByb2R1Y3QnIH0pKSxcbiAgICAgIGNyZWF0ZTogamVzdC5mbigoKSA9PiAoeyBpZDogJzEnLCBuYW1lRW46ICdOZXcgUHJvZHVjdCcgfSkpLFxuICAgICAgdXBkYXRlOiBqZXN0LmZuKCgpID0+ICh7IGlkOiAnMScsIG5hbWVFbjogJ1VwZGF0ZWQgUHJvZHVjdCcgfSkpLFxuICAgICAgZGVsZXRlOiBqZXN0LmZuKCgpID0+ICh7IGlkOiAnMScgfSkpLFxuICAgICAgY291bnQ6IGplc3QuZm4oKCkgPT4gMCksXG4gICAgfSxcbiAgICBjYXRlZ29yaWVzOiB7XG4gICAgICBmaW5kVW5pcXVlOiBqZXN0LmZuKCgpID0+ICh7IGlkOiAnMScsIG5hbWU6ICdDYXRlZ29yeScgfSkpLFxuICAgIH0sXG4gIH07XG5cbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9kdWxlOiBUZXN0aW5nTW9kdWxlID0gYXdhaXQgVGVzdC5jcmVhdGVUZXN0aW5nTW9kdWxlKHtcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICBQcm9kdWN0c1NlcnZpY2UsXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBQcmlzbWFTZXJ2aWNlLFxuICAgICAgICAgIHVzZVZhbHVlOiBtb2NrUHJpc21hU2VydmljZSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSkuY29tcGlsZSgpO1xuXG4gICAgc2VydmljZSA9IG1vZHVsZS5nZXQ8UHJvZHVjdHNTZXJ2aWNlPihQcm9kdWN0c1NlcnZpY2UpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGRlZmluZWQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHNlcnZpY2UpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZmluZCBhbGwgcHJvZHVjdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgZXhwZWN0KHNlcnZpY2UuZmluZEFsbCgpKS5yZXNvbHZlcy50b0VxdWFsKHtcbiAgICAgIGl0ZW1zOiBbXSxcbiAgICAgIHRvdGFsOiAwLFxuICAgICAgcGFnZTogMSxcbiAgICAgIGxpbWl0OiAyMCxcbiAgICAgIGhhc01vcmU6IGZhbHNlLFxuICAgIH0pO1xuICAgIGV4cGVjdChtb2NrUHJpc21hU2VydmljZS5wcm9kdWN0cy5maW5kTWFueSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9