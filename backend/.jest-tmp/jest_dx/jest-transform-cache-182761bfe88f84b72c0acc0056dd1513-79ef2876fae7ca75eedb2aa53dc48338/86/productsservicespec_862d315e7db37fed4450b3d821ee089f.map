{"file":"/Users/pkaewmanee/Desktop/Project_Hiroshima/ncs-ecom/backend/src/products/products.service.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,yDAAqD;AACrD,sDAAkD;AAElD,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,IAAI,OAAwB,CAAC;IAE7B,MAAM,iBAAiB,GAAG;QACxB,YAAY,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,OAAc,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrE,QAAQ,EAAE;YACR,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;YAC3B,UAAU,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,cAAc,EAAE,CAAC,CAAC;YAChE,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;YAC3D,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,iBAAiB,EAAE,CAAC,CAAC;YAC/D,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;YACpC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;SACxB;QACD,UAAU,EAAE;YACV,UAAU,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;SAC3D;KACF,CAAC;IAEF,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE;gBACT,kCAAe;gBACf;oBACE,OAAO,EAAE,8BAAa;oBACtB,QAAQ,EAAE,iBAAiB;iBAC5B;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,OAAO,GAAG,MAAM,CAAC,GAAG,CAAkB,kCAAe,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QACxC,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC;YAC/C,KAAK,EAAE,EAAE;YACT,KAAK,EAAE,CAAC;YACR,IAAI,EAAE,CAAC;YACP,KAAK,EAAE,EAAE;YACT,OAAO,EAAE,KAAK;SACf,CAAC,CAAC;QACH,MAAM,CAAC,iBAAiB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,gBAAgB,EAAE,CAAC;IACjE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/pkaewmanee/Desktop/Project_Hiroshima/ncs-ecom/backend/src/products/products.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ProductsService } from './products.service';\nimport { PrismaService } from '../prisma.service';\n\ndescribe('ProductsService', () => {\n  let service: ProductsService;\n\n  const mockPrismaService = {\n    $transaction: jest.fn(async (actions: any[]) => Promise.all(actions)),\n    products: {\n      findMany: jest.fn(() => []),\n      findUnique: jest.fn(() => ({ id: '1', nameEn: 'Test Product' })),\n      create: jest.fn(() => ({ id: '1', nameEn: 'New Product' })),\n      update: jest.fn(() => ({ id: '1', nameEn: 'Updated Product' })),\n      delete: jest.fn(() => ({ id: '1' })),\n      count: jest.fn(() => 0),\n    },\n    categories: {\n      findUnique: jest.fn(() => ({ id: '1', name: 'Category' })),\n    },\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        ProductsService,\n        {\n          provide: PrismaService,\n          useValue: mockPrismaService,\n        },\n      ],\n    }).compile();\n\n    service = module.get<ProductsService>(ProductsService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  it('should find all products', async () => {\n    await expect(service.findAll()).resolves.toEqual({\n      items: [],\n      total: 0,\n      page: 1,\n      limit: 20,\n      hasMore: false,\n    });\n    expect(mockPrismaService.products.findMany).toHaveBeenCalled();\n  });\n});\n"],"version":3}