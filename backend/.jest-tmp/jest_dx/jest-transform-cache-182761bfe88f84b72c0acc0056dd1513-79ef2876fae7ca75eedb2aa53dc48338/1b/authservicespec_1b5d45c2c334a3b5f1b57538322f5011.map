{"file":"/Users/pkaewmanee/Desktop/Project_Hiroshima/ncs-ecom/backend/src/auth/auth.service.spec.ts","mappings":"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","names":[],"sources":["/Users/pkaewmanee/Desktop/Project_Hiroshima/ncs-ecom/backend/src/auth/auth.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { JwtService } from '@nestjs/jwt';\nimport { AuthService } from './auth.service';\nimport { PrismaService } from '../prisma.service';\nimport * as bcrypt from 'bcryptjs';\nimport { RegisterDto } from './dto/register.dto';\nimport { LoginDto } from './dto/login.dto';\n\ndescribe('AuthService', () => {\n  let service: AuthService;\n  let mockPrismaService: any;\n  let mockJwtService: Pick<JwtService, 'sign'>;\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    mockPrismaService = {\n      users: {\n        create: jest.fn(),\n        findUnique: jest.fn(),\n      },\n      companies: {\n        findUnique: jest.fn(),\n      },\n      refresh_tokens: {\n        deleteMany: jest.fn(),\n        create: jest.fn(),\n      },\n    };\n\n    mockJwtService = {\n      sign: jest.fn(),\n    } as unknown as Pick<JwtService, 'sign'>;\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        AuthService,\n        {\n          provide: PrismaService,\n          useValue: mockPrismaService,\n        },\n        {\n          provide: JwtService,\n          useValue: mockJwtService,\n        },\n      ],\n    }).compile();\n\n    service = module.get<AuthService>(AuthService);\n  });\n\n  it('should register and return auth response', async () => {\n    const dto: RegisterDto = {\n      email: 'new@ncs.co.th',\n      password: 'password123',\n      name: 'New User',\n      companyId: 'company-1',\n    };\n\n    mockPrismaService.users.create.mockResolvedValue({ id: 'user-1' });\n    mockPrismaService.users.findUnique\n      .mockResolvedValueOnce(null)\n      .mockResolvedValueOnce({\n        id: 'user-1',\n        email: dto.email,\n        password: await bcrypt.hash(dto.password, 10),\n        name: dto.name,\n        role: 'USER',\n        companyId: dto.companyId,\n        companies: { id: dto.companyId, name: 'Company 1', tier: 'STANDARD' },\n      });\n    mockPrismaService.companies.findUnique.mockResolvedValue({\n      id: dto.companyId,\n      name: 'Company 1',\n      tier: 'STANDARD',\n    });\n\n    (mockJwtService.sign as jest.Mock)\n      .mockReturnValueOnce('mock-access-token')\n      .mockReturnValueOnce('mock-refresh-token');\n\n    const result = await service.register(dto);\n\n    expect(result.accessToken).toBe('mock-access-token');\n    expect(result.refreshToken).toBe('mock-refresh-token');\n    expect(result.user.company?.name).toBe('Company 1');\n    expect(mockPrismaService.refresh_tokens.deleteMany).toHaveBeenCalledWith({ where: { userId: 'user-1' } });\n    expect(mockPrismaService.refresh_tokens.create).toHaveBeenCalled();\n  });\n\n  it('should login and return auth response', async () => {\n    const dto: LoginDto = {\n      email: 'admin@ncs.co.th',\n      password: 'password123',\n    };\n\n    mockPrismaService.users.findUnique.mockResolvedValue({\n      id: 'user-2',\n      email: dto.email,\n      password: await bcrypt.hash(dto.password, 10),\n      name: 'Admin User',\n      role: 'ADMIN',\n      companyId: 'company-2',\n      companies: { id: 'company-2', name: 'Company 2', tier: 'ADMIN' },\n    });\n\n    (mockJwtService.sign as jest.Mock)\n      .mockReturnValueOnce('mock-access-token')\n      .mockReturnValueOnce('mock-refresh-token');\n\n    const result = await service.login(dto);\n\n    expect(result.accessToken).toBe('mock-access-token');\n    expect(result.refreshToken).toBe('mock-refresh-token');\n    expect(mockPrismaService.refresh_tokens.create).toHaveBeenCalled();\n  });\n});\n"],"version":3}