a87dcdf389c54b38a6c2e9eea78ebd95
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const jwt_1 = require("@nestjs/jwt");
const auth_service_1 = require("./auth.service");
const prisma_service_1 = require("../prisma.service");
const bcrypt = require("bcryptjs");
describe('AuthService', () => {
    let service;
    let mockPrismaService;
    let mockJwtService;
    beforeEach(async () => {
        jest.clearAllMocks();
        mockPrismaService = {
            users: {
                create: jest.fn(),
                findUnique: jest.fn(),
            },
            companies: {
                findUnique: jest.fn(),
            },
            refresh_tokens: {
                deleteMany: jest.fn(),
                create: jest.fn(),
            },
        };
        mockJwtService = {
            sign: jest.fn(),
        };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                auth_service_1.AuthService,
                {
                    provide: prisma_service_1.PrismaService,
                    useValue: mockPrismaService,
                },
                {
                    provide: jwt_1.JwtService,
                    useValue: mockJwtService,
                },
            ],
        }).compile();
        service = module.get(auth_service_1.AuthService);
    });
    it('should register and return auth response', async () => {
        const dto = {
            email: 'new@ncs.co.th',
            password: 'password123',
            name: 'New User',
            companyId: 'company-1',
        };
        mockPrismaService.users.create.mockResolvedValue({ id: 'user-1' });
        mockPrismaService.users.findUnique
            .mockResolvedValueOnce(null)
            .mockResolvedValueOnce({
            id: 'user-1',
            email: dto.email,
            password: await bcrypt.hash(dto.password, 10),
            name: dto.name,
            role: 'USER',
            companyId: dto.companyId,
            companies: { id: dto.companyId, name: 'Company 1', tier: 'STANDARD' },
        });
        mockPrismaService.companies.findUnique.mockResolvedValue({
            id: dto.companyId,
            name: 'Company 1',
            tier: 'STANDARD',
        });
        mockJwtService.sign
            .mockReturnValueOnce('mock-access-token')
            .mockReturnValueOnce('mock-refresh-token');
        const result = await service.register(dto);
        expect(result.accessToken).toBe('mock-access-token');
        expect(result.refreshToken).toBe('mock-refresh-token');
        expect(result.user.company?.name).toBe('Company 1');
        expect(mockPrismaService.refresh_tokens.deleteMany).toHaveBeenCalledWith({ where: { userId: 'user-1' } });
        expect(mockPrismaService.refresh_tokens.create).toHaveBeenCalled();
    });
    it('should login and return auth response', async () => {
        const dto = {
            email: 'admin@ncs.co.th',
            password: 'password123',
        };
        mockPrismaService.users.findUnique.mockResolvedValue({
            id: 'user-2',
            email: dto.email,
            password: await bcrypt.hash(dto.password, 10),
            name: 'Admin User',
            role: 'ADMIN',
            companyId: 'company-2',
            companies: { id: 'company-2', name: 'Company 2', tier: 'ADMIN' },
        });
        mockJwtService.sign
            .mockReturnValueOnce('mock-access-token')
            .mockReturnValueOnce('mock-refresh-token');
        const result = await service.login(dto);
        expect(result.accessToken).toBe('mock-access-token');
        expect(result.refreshToken).toBe('mock-refresh-token');
        expect(mockPrismaService.refresh_tokens.create).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,