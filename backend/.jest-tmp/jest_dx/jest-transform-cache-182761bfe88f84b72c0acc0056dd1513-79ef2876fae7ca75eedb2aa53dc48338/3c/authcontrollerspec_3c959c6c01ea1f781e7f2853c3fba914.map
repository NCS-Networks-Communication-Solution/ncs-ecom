{"file":"/Users/pkaewmanee/Desktop/Project_Hiroshima/ncs-ecom/backend/src/auth/auth.controller.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,uDAAmD;AACnD,iDAA6C;AAI7C,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,IAAI,UAA0B,CAAC;IAC/B,IAAI,eAA8D,CAAC;IAEnE,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,eAAe,GAAG;YAChB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;gBACpC,WAAW,EAAE,mBAAmB;gBAChC,YAAY,EAAE,oBAAoB;gBAClC,SAAS,EAAE,KAAK;gBAChB,IAAI,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,gBAAgB,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE;aAC3F,CAAC;YACF,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;gBACjC,WAAW,EAAE,mBAAmB;gBAChC,YAAY,EAAE,oBAAoB;gBAClC,SAAS,EAAE,KAAK;gBAChB,IAAI,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,gBAAgB,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE;aAC3F,CAAC;SACyD,CAAC;QAE9D,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,WAAW,EAAE,CAAC,gCAAc,CAAC;YAC7B,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,0BAAW;oBACpB,QAAQ,EAAE,eAAe;iBAC1B;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,UAAU,GAAG,MAAM,CAAC,GAAG,CAAiB,gCAAc,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACnD,MAAM,GAAG,GAAgB;YACvB,KAAK,EAAE,eAAe;YACtB,QAAQ,EAAE,aAAa;YACvB,IAAI,EAAE,UAAU;YAChB,SAAS,EAAE,WAAW;SACvB,CAAC;QAEF,MAAM,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC/B,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,GAAG,GAAa,EAAE,KAAK,EAAE,eAAe,EAAE,QAAQ,EAAE,aAAa,EAAE,CAAC;QAE1E,MAAM,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC5B,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/pkaewmanee/Desktop/Project_Hiroshima/ncs-ecom/backend/src/auth/auth.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { RegisterDto } from './dto/register.dto';\nimport { LoginDto } from './dto/login.dto';\n\ndescribe('AuthController', () => {\n  let controller: AuthController;\n  let mockAuthService: Partial<Record<keyof AuthService, jest.Mock>>;\n\n  beforeEach(async () => {\n    mockAuthService = {\n      register: jest.fn().mockResolvedValue({\n        accessToken: 'mock-access-token',\n        refreshToken: 'mock-refresh-token',\n        expiresIn: 86400,\n        user: { id: '1', email: 'test@ncs.co.th', name: 'Test User', role: 'USER', company: null },\n      }),\n      login: jest.fn().mockResolvedValue({\n        accessToken: 'mock-access-token',\n        refreshToken: 'mock-refresh-token',\n        expiresIn: 86400,\n        user: { id: '1', email: 'test@ncs.co.th', name: 'Test User', role: 'USER', company: null },\n      }),\n    } as unknown as Partial<Record<keyof AuthService, jest.Mock>>;\n\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [AuthController],\n      providers: [\n        {\n          provide: AuthService,\n          useValue: mockAuthService,\n        },\n      ],\n    }).compile();\n\n    controller = module.get<AuthController>(AuthController);\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  it('should delegate register to service', async () => {\n    const dto: RegisterDto = {\n      email: 'new@ncs.co.th',\n      password: 'password123',\n      name: 'New User',\n      companyId: 'company-1',\n    };\n\n    await controller.register(dto);\n    expect(mockAuthService.register).toHaveBeenCalledWith(dto);\n  });\n\n  it('should delegate login to service', async () => {\n    const dto: LoginDto = { email: 'new@ncs.co.th', password: 'password123' };\n\n    await controller.login(dto);\n    expect(mockAuthService.login).toHaveBeenCalledWith(dto);\n  });\n});\n"],"version":3}