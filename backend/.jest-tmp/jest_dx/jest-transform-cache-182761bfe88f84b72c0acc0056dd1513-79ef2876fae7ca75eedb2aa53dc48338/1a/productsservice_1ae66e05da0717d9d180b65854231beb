8e83ce951c1decd82913b1b829776b98
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductsService = void 0;
const common_1 = require("@nestjs/common");
const client_1 = require("@prisma/client");
const prisma_service_1 = require("../prisma.service");
const crypto_1 = require("crypto");
let ProductsService = class ProductsService {
    constructor(prisma) {
        this.prisma = prisma;
    }
    async findAll(options = {}) {
        const { search, categoryId, minPrice, maxPrice, page = 1, limit = 20 } = options;
        const where = {};
        if (search) {
            where.OR = [
                { nameEn: { contains: search, mode: 'insensitive' } },
                { nameTh: { contains: search, mode: 'insensitive' } },
                { sku: { contains: search, mode: 'insensitive' } },
            ];
        }
        if (categoryId) {
            where.categoryId = categoryId;
        }
        if (minPrice !== undefined || maxPrice !== undefined) {
            where.price = {};
            if (minPrice !== undefined) {
                where.price.gte = new client_1.Prisma.Decimal(minPrice);
            }
            if (maxPrice !== undefined) {
                where.price.lte = new client_1.Prisma.Decimal(maxPrice);
            }
        }
        const skip = (page - 1) * limit;
        const [items, total] = await this.prisma.$transaction([
            this.prisma.products.findMany({
                where,
                include: { categories: true },
                skip,
                take: limit,
                orderBy: { nameEn: 'asc' },
            }),
            this.prisma.products.count({ where }),
        ]);
        const hasMore = skip + items.length < total;
        return {
            items,
            total,
            page,
            limit,
            hasMore,
        };
    }
    async findOne(id) {
        const product = await this.prisma.products.findUnique({
            where: { id },
            include: { categories: true },
        });
        if (!product) {
            throw new common_1.NotFoundException(`Product with ID ${id} not found`);
        }
        return product;
    }
    async create(dto) {
        await this.ensureCategoryExists(dto.categoryId);
        const existingSku = await this.prisma.products.findUnique({ where: { sku: dto.sku } });
        if (existingSku) {
            throw new common_1.ConflictException(`Product with SKU ${dto.sku} already exists`);
        }
        const productData = {
            id: (0, crypto_1.randomUUID)(),
            sku: dto.sku,
            nameEn: dto.nameEn,
            nameTh: dto.nameTh,
            description: dto.description ?? undefined,
            price: new client_1.Prisma.Decimal(dto.price),
            stock: dto.stock,
            createdAt: new Date(),
            updatedAt: new Date(),
            categories: {
                connect: { id: dto.categoryId },
            },
        };
        try {
            return await this.prisma.products.create({
                data: productData,
                include: { categories: true },
            });
        }
        catch (error) {
            throw new common_1.ConflictException('Failed to create product. Check SKU and category.');
        }
    }
    async update(id, dto) {
        await this.findOne(id);
        if (dto.categoryId) {
            await this.ensureCategoryExists(dto.categoryId);
        }
        const productData = {
            updatedAt: new Date(),
        };
        if (dto.nameEn !== undefined) {
            productData.nameEn = dto.nameEn;
        }
        if (dto.nameTh !== undefined) {
            productData.nameTh = dto.nameTh;
        }
        if (dto.description !== undefined) {
            productData.description = dto.description;
        }
        if (dto.price !== undefined) {
            productData.price = new client_1.Prisma.Decimal(dto.price);
        }
        if (dto.stock !== undefined) {
            productData.stock = dto.stock;
        }
        if (dto.categoryId) {
            productData.categories = { connect: { id: dto.categoryId } };
        }
        try {
            return await this.prisma.products.update({
                where: { id },
                data: productData,
                include: { categories: true },
            });
        }
        catch (error) {
            throw new common_1.ConflictException('Failed to update product.');
        }
    }
    async remove(id) {
        await this.findOne(id);
        return this.prisma.products.delete({
            where: { id },
            include: { categories: true },
        });
    }
    async ensureCategoryExists(categoryId) {
        const category = await this.prisma.categories.findUnique({ where: { id: categoryId } });
        if (!category) {
            throw new common_1.NotFoundException(`Category with ID ${categoryId} not found`);
        }
    }
};
exports.ProductsService = ProductsService;
exports.ProductsService = ProductsService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [prisma_service_1.PrismaService])
], ProductsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,