f24932831878a1af6d86ce5b48908b1b
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AuthService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthService = void 0;
const common_1 = require("@nestjs/common");
const jwt_1 = require("@nestjs/jwt");
const prisma_service_1 = require("../prisma.service");
const bcrypt = require("bcryptjs");
const crypto_1 = require("crypto");
const client_1 = require("@prisma/client");
let AuthService = AuthService_1 = class AuthService {
    constructor(prisma, jwtService) {
        this.prisma = prisma;
        this.jwtService = jwtService;
    }
    async register(dto) {
        try {
            const existingUser = await this.prisma.users.findUnique({ where: { email: dto.email } });
            if (existingUser) {
                throw new common_1.ConflictException('Email address is already registered');
            }
            const company = await this.prisma.companies.findUnique({ where: { id: dto.companyId } });
            if (!company) {
                throw new common_1.BadRequestException('Invalid company ID');
            }
            const hashedPassword = await bcrypt.hash(dto.password, 10);
            const createdUser = await this.prisma.users.create({
                data: {
                    id: (0, crypto_1.randomUUID)(),
                    email: dto.email,
                    password: hashedPassword,
                    name: dto.name,
                    role: 'USER',
                    companies: {
                        connect: { id: dto.companyId },
                    },
                },
            });
            const user = await this.findUserWithCompany(createdUser.id);
            if (!user) {
                throw new common_1.UnauthorizedException('Unable to load created user');
            }
            return this.generateTokens(user);
        }
        catch (error) {
            if (error instanceof common_1.ConflictException ||
                error instanceof common_1.BadRequestException ||
                error instanceof common_1.UnauthorizedException) {
                throw error;
            }
            if (error instanceof client_1.Prisma.PrismaClientKnownRequestError) {
                if (error.code === 'P2002') {
                    const target = error.meta?.target;
                    if (target?.includes('email')) {
                        throw new common_1.ConflictException('Email address is already registered');
                    }
                    throw new common_1.ConflictException('Registration failed due to duplicate data');
                }
                if (error.code === 'P2025') {
                    throw new common_1.BadRequestException('Invalid company ID');
                }
            }
            if (error instanceof client_1.Prisma.PrismaClientInitializationError) {
                throw new common_1.BadRequestException('Database connection failed');
            }
            console.error('Unexpected registration error:', error);
            throw new common_1.BadRequestException('Registration failed due to an unexpected error');
        }
    }
    async login(dto) {
        const user = await this.prisma.users.findUnique({
            where: { email: dto.email },
            include: { companies: true },
        });
        if (!user || !(await bcrypt.compare(dto.password, user.password))) {
            throw new common_1.UnauthorizedException('Invalid credentials');
        }
        if (user.isActive === false) {
            throw new common_1.UnauthorizedException('Account is deactivated');
        }
        return this.generateTokens(user);
    }
    async refreshToken(refreshToken) {
        if (!refreshToken) {
            throw new common_1.UnauthorizedException('Refresh token required');
        }
        let payload;
        try {
            payload = this.jwtService.verify(refreshToken);
        }
        catch (error) {
            throw new common_1.UnauthorizedException('Invalid refresh token');
        }
        if (!payload?.sub || payload.type !== 'refresh') {
            throw new common_1.UnauthorizedException('Invalid refresh token');
        }
        const storedToken = await this.prisma.refresh_tokens.findFirst({
            where: {
                userId: payload.sub,
                expiresAt: { gt: new Date() },
            },
        });
        if (!storedToken) {
            throw new common_1.UnauthorizedException('Refresh token expired or not found');
        }
        const isValid = await bcrypt.compare(refreshToken, storedToken.tokenHash);
        if (!isValid) {
            throw new common_1.UnauthorizedException('Invalid refresh token');
        }
        const user = await this.findUserWithCompany(payload.sub);
        if (!user) {
            throw new common_1.UnauthorizedException('User not found');
        }
        if (user.isActive === false) {
            throw new common_1.UnauthorizedException('Account is deactivated');
        }
        return this.generateTokens(user);
    }
    async generateTokens(user) {
        const payload = {
            sub: user.id,
            email: user.email,
            role: user.role,
            companyId: user.companyId,
        };
        const accessToken = this.jwtService.sign(payload, {
            expiresIn: AuthService_1.ACCESS_TOKEN_TTL_SECONDS,
        });
        const { refreshToken } = await this.saveRefreshToken(user.id);
        return {
            accessToken,
            refreshToken,
            expiresIn: AuthService_1.ACCESS_TOKEN_TTL_SECONDS,
            user: this.mapToAdminUser(user),
        };
    }
    async saveRefreshToken(userId) {
        await this.prisma.refresh_tokens.deleteMany({ where: { userId } });
        const refreshToken = this.jwtService.sign({ sub: userId, type: 'refresh' }, { expiresIn: AuthService_1.REFRESH_TOKEN_TTL_SECONDS });
        const tokenHash = await bcrypt.hash(refreshToken, 10);
        const expiresAt = new Date(Date.now() + AuthService_1.REFRESH_TOKEN_TTL_SECONDS * 1000);
        await this.prisma.refresh_tokens.create({
            data: {
                id: (0, crypto_1.randomUUID)(),
                userId,
                tokenHash,
                expiresAt,
            },
        });
        return { refreshToken, expiresAt };
    }
    findUserWithCompany(userId) {
        return this.prisma.users.findUnique({
            where: { id: userId },
            include: { companies: true },
        });
    }
    mapToAdminUser(user) {
        return {
            id: user.id,
            name: user.name,
            email: user.email,
            role: user.role,
            company: user.companies
                ? {
                    id: user.companies.id,
                    name: user.companies.name,
                    tier: user.companies.tier,
                }
                : null,
        };
    }
};
exports.AuthService = AuthService;
AuthService.ACCESS_TOKEN_TTL_SECONDS = 60 * 60 * 24; // 24 hours
AuthService.REFRESH_TOKEN_TTL_SECONDS = 60 * 60 * 24 * 7; // 7 days
exports.AuthService = AuthService = AuthService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [prisma_service_1.PrismaService,
        jwt_1.JwtService])
], AuthService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,