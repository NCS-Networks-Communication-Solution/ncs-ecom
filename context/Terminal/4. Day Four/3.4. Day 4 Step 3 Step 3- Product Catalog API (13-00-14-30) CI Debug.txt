Last login: Mon Sep 29 14:42:43 on ttys001
pkaewmanee@Phakkhapons-MacBook-Pro backend % npx prisma generate

warn The configuration property `package.json#prisma` is deprecated and will be removed in Prisma 7. Please migrate to a Prisma config file (e.g., `prisma.config.ts`).
For more information, see: https://pris.ly/prisma-config

Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma

âœ” Generated Prisma Client (v6.16.2) to ./node_modules/@prisma/client in 121ms

Start by importing your Prisma Client (See: https://pris.ly/d/importing-client)

Tip: Want to turn off tips and other hints? https://pris.ly/tip-4-nohints

pkaewmanee@Phakkhapons-MacBook-Pro backend % npx prisma validate

warn The configuration property `package.json#prisma` is deprecated and will be removed in Prisma 7. Please migrate to a Prisma config file (e.g., `prisma.config.ts`).
For more information, see: https://pris.ly/prisma-config

Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma
The schema at prisma/schema.prisma is valid ðŸš€
pkaewmanee@Phakkhapons-MacBook-Pro backend % npx prisma studio --browser none --port 5555 &
sleep 2 && curl -I http://localhost:5555 && kill $!
[1] 13116
warn The configuration property `package.json#prisma` is deprecated and will be removed in Prisma 7. Please migrate to a Prisma config file (e.g., `prisma.config.ts`).
For more information, see: https://pris.ly/prisma-config

Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma
Prisma Studio is up on http://localhost:5555
HTTP/1.1 200 OK
X-Powered-By: Express
Cache-Control: no-cache
Last-Modified: Mon, 29 Sep 2025 07:54:25 GMT
Accept-Ranges: bytes
Content-Type: text/html; charset=UTF-8
Content-Length: 572
Date: Mon, 29 Sep 2025 07:54:25 GMT
Connection: keep-alive
Keep-Alive: timeout=5

pkaewmanee@Phakkhapons-MacBook-Pro backend % 
[1]  + terminated  npx prisma studio --browser none --port 5555
pkaewmanee@Phakkhapons-MacBook-Pro backend % npm run build

> ncs-backend@0.1.0 build
> nest build

pkaewmanee@Phakkhapons-MacBook-Pro backend % npx prisma generate
warn The configuration property `package.json#prisma` is deprecated and will be removed in Prisma 7. Please migrate to a Prisma config file (e.g., `prisma.config.ts`).
For more information, see: https://pris.ly/prisma-config

Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma

âœ” Generated Prisma Client (v6.16.2) to ./node_modules/@prisma/client in 112ms

Start by importing your Prisma Client (See: https://pris.ly/d/importing-client)

Tip: Want to turn off tips and other hints? https://pris.ly/tip-4-nohints

pkaewmanee@Phakkhapons-MacBook-Pro backend % npm run build
npm run test

> ncs-backend@0.1.0 build
> nest build


> ncs-backend@0.1.0 test
> jest

 PASS  src/users/users.service.spec.ts
 PASS  src/products/products.service.spec.ts
 PASS  src/auth/auth.service.spec.ts
 PASS  src/auth/auth.controller.spec.ts
 PASS  src/products/products.controller.spec.ts

Test Suites: 5 passed, 5 total
Tests:       7 passed, 7 total
Snapshots:   0 total
Time:        4.291 s
Ran all test suites.
pkaewmanee@Phakkhapons-MacBook-Pro backend % git add .
git commit -m "fix(catalog): resolve CI failures and add proper test mocks

- Generate Prisma Client to include Product model types
- Fix products.controller.spec.ts with ProductsService mock
- Fix products.service.spec.ts with PrismaService mock
- Resolve TypeScript compilation errors for this.prisma.product

Fixes all CI build failures in PR #29
REQ-CAT-001"

[feature/product-catalog-api 697845d] fix(catalog): resolve CI failures and add proper test mocks
 7 files changed, 74 insertions(+), 2 deletions(-)
 create mode 100644 backend/backup_before_schema_expansion.sql
 create mode 100644 backend/src/users/users.module.ts
 create mode 100644 backend/src/users/users.service.spec.ts
 create mode 100644 backend/src/users/users.service.ts
pkaewmanee@Phakkhapons-MacBook-Pro backend % git push origin feature/product-catalog-api
Enumerating objects: 19, done.
Counting objects: 100% (19/19), done.
Delta compression using up to 16 threads
Compressing objects: 100% (12/12), done.
Writing objects: 100% (12/12), 2.07 KiB | 2.07 MiB/s, done.
Total 12 (delta 6), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (6/6), completed with 5 local objects.
remote: 
remote: GitHub found 1 vulnerability on NCS-Networks-Communication-Solution/ncs-ecom's default branch (1 low). To find out more, visit:
remote:      https://github.com/NCS-Networks-Communication-Solution/ncs-ecom/security/dependabot/1
remote: 
To https://github.com/NCS-Networks-Communication-Solution/ncs-ecom
   b980907..697845d  feature/product-catalog-api -> feature/product-catalog-api
pkaewmanee@Phakkhapons-MacBook-Pro backend % git add package.json
git commit -m "fix(ci): add prebuild script to generate Prisma Client

- Add prebuild script that runs npx prisma generate before build
- Ensures CI environments have Prisma Client types available
- Fixes Property 'product' does not exist on type 'PrismaService' in CI

Resolves CI build failures in PR #29"

git push origin feature/product-catalog-api
[feature/product-catalog-api b90f931] fix(ci): add prebuild script to generate Prisma Client
 1 file changed, 1 insertion(+)
Enumerating objects: 7, done.
Counting objects: 100% (7/7), done.
Delta compression using up to 16 threads
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 562 bytes | 562.00 KiB/s, done.
Total 4 (delta 3), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (3/3), completed with 3 local objects.
remote: 
remote: GitHub found 1 vulnerability on NCS-Networks-Communication-Solution/ncs-ecom's default branch (1 low). To find out more, visit:
remote:      https://github.com/NCS-Networks-Communication-Solution/ncs-ecom/security/dependabot/1
remote: 
To https://github.com/NCS-Networks-Communication-Solution/ncs-ecom
   697845d..b90f931  feature/product-catalog-api -> feature/product-catalog-api
pkaewmanee@Phakkhapons-MacBook-Pro backend % git add .github/workflows/ci.yml
git commit -m "fix(ci): add Prisma Client generation step to workflow

- Generate Prisma Client before build/lint/test steps
- Ensures CI has access to Product model types
- Resolves 'Property product does not exist on type PrismaService'

Fixes CI build failures in PR #29"

git push origin feature/product-catalog-api
fatal: pathspec '.github/workflows/ci.yml' did not match any files
On branch feature/product-catalog-api
Your branch is up to date with 'origin/feature/product-catalog-api'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   ../.github/pull_request_template.md
	modified:   ../.github/workflows/ci.yml

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	../.github/ISSUE_TEMPLATE/commit-guidelines.md
	../.github/ISSUE_TEMPLATE/github-issue-template.md
	../.github/ISSUE_TEMPLATE/github-pr-template.md
	../.github/ISSUE_TEMPLATE/project-automation.md
	../docs/project-board-update-commands.txt

no changes added to commit (use "git add" and/or "git commit -a")
Everything up-to-date
pkaewmanee@Phakkhapons-MacBook-Pro backend % npx prisma db pull --print

warn The configuration property `package.json#prisma` is deprecated and will be removed in Prisma 7. Please migrate to a Prisma config file (e.g., `prisma.config.ts`).
For more information, see: https://pris.ly/prisma-config

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(uuid())
  name      String   @unique
  taxId     String?  @unique @map("tax_id")
  tier      String   @default("STANDARD")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  orders    Order[]
  quotes    Quote[]
  users     User[]

  @@map("companies")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  companyId String   @map("company_id")
  createdAt DateTime @default(now()) @map("created_at")
  carts     Cart[]
  orders    Order[]
  quotes    Quote[]
  company   Company  @relation(fields: [companyId], references: [id])

  @@map("users")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  nameEn      String    @map("name_en")
  nameTh      String    @map("name_th")
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  products    Product[]

  @@map("categories")
}

model Product {
  id          String      @id @default(uuid())
  sku         String      @unique
  nameEn      String      @map("name_en")
  nameTh      String      @map("name_th")
  description String?
  price       Decimal     @db.Decimal(12, 2)
  stock       Int         @default(0)
  categoryId  String      @map("category_id")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  cartItems   Cart[]
  orderItems  OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id])
  quoteItems  QuoteItem[]

  @@map("products")
}

model Cart {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")
  quantity  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@map("carts")
}

model Quote {
  id         String      @id @default(uuid())
  quoteNo    String      @unique @map("quote_no")
  companyId  String      @map("company_id")
  userId     String      @map("user_id")
  status     QuoteStatus @default(PENDING)
  total      Decimal     @db.Decimal(12, 2)
  validUntil DateTime    @map("valid_until")
  createdAt  DateTime    @default(now()) @map("created_at")
  order      Order?
  items      QuoteItem[]
  company    Company     @relation(fields: [companyId], references: [id])
  user       User        @relation(fields: [userId], references: [id])

  @@map("quotes")
}

model QuoteItem {
  id        String  @id @default(uuid())
  quoteId   String  @map("quote_id")
  productId String  @map("product_id")
  quantity  Int
  unitPrice Decimal @map("unit_price") @db.Decimal(12, 2)
  product   Product @relation(fields: [productId], references: [id])
  quote     Quote   @relation(fields: [quoteId], references: [id])

  @@map("quote_items")
}

model Order {
  id        String      @id @default(uuid())
  orderNo   String      @unique @map("order_no")
  companyId String      @map("company_id")
  userId    String      @map("user_id")
  quoteId   String?     @unique @map("quote_id")
  status    OrderStatus @default(PENDING)
  total     Decimal     @db.Decimal(12, 2)
  poNumber  String?     @map("po_number")
  createdAt DateTime    @default(now()) @map("created_at")
  items     OrderItem[]
  company   Company     @relation(fields: [companyId], references: [id])
  quote     Quote?      @relation(fields: [quoteId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
  payment   Payment?

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  @map("order_id")
  productId String  @map("product_id")
  quantity  Int
  unitPrice Decimal @map("unit_price") @db.Decimal(12, 2)
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id             String   @id @default(uuid())
  orderId        String   @unique @map("order_id")
  method         String
  status         String   @default("PENDING")
  amount         Decimal  @db.Decimal(12, 2)
  transactionId  String?  @map("transaction_id")
  paymentSlipUrl String?  @map("payment_slip_url")
  promptpayQr    String?  @map("promptpay_qr")
  createdAt      DateTime @default(now()) @map("created_at")
  order          Order    @relation(fields: [orderId], references: [id])

  @@map("payments")
}

enum Role {
  USER
  ADMIN
  PURCHASER
  APPROVER
}

enum QuoteStatus {
  PENDING
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}


// *** WARNING ***
// 
// These fields were enriched with `@map` information taken from the previous Prisma schema:
//   - Model: "Cart", field: "userId"
//   - Model: "Cart", field: "productId"
//   - Model: "Cart", field: "createdAt"
//   - Model: "Cart", field: "updatedAt"
//   - Model: "Category", field: "nameEn"
//   - Model: "Category", field: "nameTh"
//   - Model: "Category", field: "createdAt"
//   - Model: "Company", field: "taxId"
//   - Model: "Company", field: "createdAt"
//   - Model: "Company", field: "updatedAt"
//   - Model: "OrderItem", field: "orderId"
//   - Model: "OrderItem", field: "productId"
//   - Model: "OrderItem", field: "unitPrice"
//   - Model: "Order", field: "orderNo"
//   - Model: "Order", field: "companyId"
//   - Model: "Order", field: "userId"
//   - Model: "Order", field: "quoteId"
//   - Model: "Order", field: "poNumber"
//   - Model: "Order", field: "createdAt"
//   - Model: "Payment", field: "orderId"
//   - Model: "Payment", field: "transactionId"
//   - Model: "Payment", field: "paymentSlipUrl"
//   - Model: "Payment", field: "promptpayQr"
//   - Model: "Payment", field: "createdAt"
//   - Model: "Product", field: "nameEn"
//   - Model: "Product", field: "nameTh"
//   - Model: "Product", field: "categoryId"
//   - Model: "Product", field: "createdAt"
//   - Model: "Product", field: "updatedAt"
//   - Model: "QuoteItem", field: "quoteId"
//   - Model: "QuoteItem", field: "productId"
//   - Model: "QuoteItem", field: "unitPrice"
//   - Model: "Quote", field: "quoteNo"
//   - Model: "Quote", field: "companyId"
//   - Model: "Quote", field: "userId"
//   - Model: "Quote", field: "validUntil"
//   - Model: "Quote", field: "createdAt"
//   - Model: "User", field: "companyId"
//   - Model: "User", field: "createdAt"
// 
// These models were enriched with `@@map` information taken from the previous Prisma schema:
//   - "Cart"
//   - "Category"
//   - "Company"
//   - "OrderItem"
//   - "Order"
//   - "Payment"
//   - "Product"
//   - "QuoteItem"
//   - "Quote"
//   - "User"
// 

pkaewmanee@Phakkhapons-MacBook-Pro backend % cd ..
pkaewmanee@Phakkhapons-MacBook-Pro ncs-ecom % git add .github/workflows/ci.yml
git add .

pkaewmanee@Phakkhapons-MacBook-Pro ncs-ecom % git commit -m "fix(ci): update Prisma Client generation for CI environment

- Add mock DATABASE_URL for CI builds
- Skip database validation in CI workflow
- Ensure Prisma Client types are available for TypeScript compilation

Resolves CI build failures in PR #29"
[feature/product-catalog-api 3675000] fix(ci): update Prisma Client generation for CI environment
pkaewmanee@Phakkhapons-MacBook-Pro ncs-ecom % git push origin feature/product-catalog-api
Enumerating objects: 34, done.
Counting objects: 100% (30/30), done.
Delta compression using up to 16 threads
Compressing objects: 100% (11/11), done.
Writing objects: 100% (12/12), 2.19 KiB | 2.19 MiB/s, done.
Total 12 (delta 9), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (9/9), completed with 8 local objects.
remote: 
remote: GitHub found 1 vulnerability on NCS-Networks-Communication-Solution/ncs-ecom's default branch (1 low). To find out more, visit:
remote:      https://github.com/NCS-Networks-Communication-Solution/ncs-ecom/security/dependabot/1
remote: 
To https://github.com/NCS-Networks-Communication-Solution/ncs-ecom
   ddbf19d..3675000  feature/product-catalog-api -> feature/product-catalog-api
pkaewmanee@Phakkhapons-MacBook-Pro ncs-ecom % git add src/prisma.service.ts
git commit -m "fix(prisma): add missing closing braces in PrismaService

- Fix malformed class definition in prisma.service.ts
- Resolve TypeScript compilation error 'Property product does not exist'
- PrismaService now properly extends PrismaClient

Fixes CI build failures in PR #29"
fatal: pathspec 'src/prisma.service.ts' did not match any files
On branch feature/product-catalog-api
Your branch is up to date with 'origin/feature/product-catalog-api'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   backend/src/prisma.service.ts

no changes added to commit (use "git add" and/or "git commit -a")
pkaewmanee@Phakkhapons-MacBook-Pro ncs-ecom % git add backend/src/prisma.service.ts
pkaewmanee@Phakkhapons-MacBook-Pro ncs-ecom % git commit -m "fix(prisma): add missing closing braces in PrismaService

- Fix malformed class definition in prisma.service.ts
- Resolve TypeScript compilation error 'Property product does not exist'
- PrismaService now properly extends PrismaClient

Fixes CI build failures in PR #29"
[feature/product-catalog-api 5755386] fix(prisma): add missing closing braces in PrismaService
 1 file changed, 1 insertion(+), 1 deletion(-)
pkaewmanee@Phakkhapons-MacBook-Pro ncs-ecom % git push origin feature/product-catalog-api
Enumerating objects: 9, done.
Counting objects: 100% (9/9), done.
Delta compression using up to 16 threads
Compressing objects: 100% (5/5), done.
Writing objects: 100% (5/5), 586 bytes | 586.00 KiB/s, done.
Total 5 (delta 4), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (4/4), completed with 4 local objects.
remote: 
remote: GitHub found 1 vulnerability on NCS-Networks-Communication-Solution/ncs-ecom's default branch (1 low). To find out more, visit:
remote:      https://github.com/NCS-Networks-Communication-Solution/ncs-ecom/security/dependabot/1
remote: 
To https://github.com/NCS-Networks-Communication-Solution/ncs-ecom
   3675000..5755386  feature/product-catalog-api -> feature/product-catalog-api
pkaewmanee@Phakkhapons-MacBook-Pro ncs-ecom % ls
CODE_OF_CONDUCT.md	backend			set-backlog.sh
CONTRIBUTING.md		docker-compose.yml	spec
LICENSE			docs			tsconfig.json
README.md		frontend
pkaewmanee@Phakkhapons-MacBook-Pro ncs-ecom % cd backend 
pkaewmanee@Phakkhapons-MacBook-Pro backend % cat node_modules/@prisma/client/index.d.ts | grep -A 5 "product"
pkaewmanee@Phakkhapons-MacBook-Pro backend % npx prisma generate --schema=prisma/schema.prisma
ls -la node_modules/@prisma/client/

warn The configuration property `package.json#prisma` is deprecated and will be removed in Prisma 7. Please migrate to a Prisma config file (e.g., `prisma.config.ts`).
For more information, see: https://pris.ly/prisma-config

Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma

âœ” Generated Prisma Client (v6.16.2) to ./node_modules/@prisma/client in 76ms

Start by importing your Prisma Client (See: https://pris.ly/d/importing-client)

Tip: Need your database queries to be 1000x faster? Accelerate offers you that and more: https://pris.ly/tip-2-accelerate

total 184
drwxr-xr-x  24 pkaewmanee  staff    768 Sep 26 14:23 .
drwxr-xr-x   9 pkaewmanee  staff    288 Sep 26 14:23 ..
-rw-r--r--   1 pkaewmanee  staff  11357 Sep 26 14:23 LICENSE
-rw-r--r--   1 pkaewmanee  staff   2553 Sep 26 14:23 README.md
-rw-r--r--   1 pkaewmanee  staff     39 Sep 26 14:23 default.d.ts
-rw-r--r--   1 pkaewmanee  staff     61 Sep 26 14:23 default.js
-rw-r--r--   1 pkaewmanee  staff     36 Sep 26 14:23 edge.d.ts
-rw-r--r--   1 pkaewmanee  staff    107 Sep 26 14:23 edge.js
-rw-r--r--   1 pkaewmanee  staff     40 Sep 26 14:23 extension.d.ts
-rw-r--r--   1 pkaewmanee  staff    111 Sep 26 14:23 extension.js
drwxr-xr-x   3 pkaewmanee  staff     96 Sep 26 14:23 generator-build
-rw-r--r--   1 pkaewmanee  staff     80 Sep 26 14:23 index-browser.js
-rw-r--r--   1 pkaewmanee  staff     39 Sep 26 14:23 index.d.ts
-rw-r--r--   1 pkaewmanee  staff    110 Sep 26 14:23 index.js
-rw-r--r--   1 pkaewmanee  staff  10127 Sep 26 14:23 package.json
-rw-r--r--   1 pkaewmanee  staff     44 Sep 26 14:23 react-native.d.ts
-rw-r--r--   1 pkaewmanee  staff     66 Sep 26 14:23 react-native.js
drwxr-xr-x  83 pkaewmanee  staff   2656 Sep 26 14:23 runtime
drwxr-xr-x   7 pkaewmanee  staff    224 Sep 26 14:23 scripts
-rw-r--r--   1 pkaewmanee  staff     35 Sep 26 14:23 sql.d.ts
-rw-r--r--   1 pkaewmanee  staff     70 Sep 26 14:23 sql.js
-rw-r--r--   1 pkaewmanee  staff     51 Sep 26 14:23 sql.mjs
-rw-r--r--   1 pkaewmanee  staff     36 Sep 26 14:23 wasm.d.ts
-rw-r--r--   1 pkaewmanee  staff    107 Sep 26 14:23 wasm.js
pkaewmanee@Phakkhapons-MacBook-Pro backend % rm -rf node_modules/@prisma/client
npx prisma generate
npm run build

warn The configuration property `package.json#prisma` is deprecated and will be removed in Prisma 7. Please migrate to a Prisma config file (e.g., `prisma.config.ts`).
For more information, see: https://pris.ly/prisma-config

Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma

âœ” Installed the @prisma/client and prisma packages in your project

âœ” Generated Prisma Client (v6.16.2) to ./node_modules/@prisma/client in 113ms

Start by importing your Prisma Client (See: https://pris.ly/d/importing-client)

Tip: Want to turn off tips and other hints? https://pris.ly/tip-4-nohints


> ncs-backend@0.1.0 prebuild
> npx prisma generate

warn The configuration property `package.json#prisma` is deprecated and will be removed in Prisma 7. Please migrate to a Prisma config file (e.g., `prisma.config.ts`).
For more information, see: https://pris.ly/prisma-config

Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma

âœ” Generated Prisma Client (v6.16.2) to ./node_modules/@prisma/client in 62ms

Start by importing your Prisma Client (See: https://pris.ly/d/importing-client)

Tip: Interested in query caching in just a few lines of code? Try Accelerate today! https://pris.ly/tip-3-accelerate


> ncs-backend@0.1.0 build
> nest build

src/products/products.service.ts:23:24 - error TS2339: Property 'product' does not exist on type 'PrismaService'.

23     return this.prisma.product.findMany({
                          ~~~~~~~
src/products/products.service.ts:30:24 - error TS2339: Property 'product' does not exist on type 'PrismaService'.

30     return this.prisma.product.findUnique({
                          ~~~~~~~
src/products/products.service.ts:37:24 - error TS2339: Property 'product' does not exist on type 'PrismaService'.

37     return this.prisma.product.create({
                          ~~~~~~~
src/products/products.service.ts:44:24 - error TS2339: Property 'product' does not exist on type 'PrismaService'.

44     return this.prisma.product.update({
                          ~~~~~~~

Found 4 error(s).

pkaewmanee@Phakkhapons-MacBook-Pro backend % cat node_modules/@prisma/client/index.d.ts | head -50

export * from '.prisma/client/default'
pkaewmanee@Phakkhapons-MacBook-Pro backend % grep -i "product\|company\|user" node_modules/@prisma/client/index.d.ts

pkaewmanee@Phakkhapons-MacBook-Pro backend % head -20 prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  password  String
  name      String
  role      Role    @default(USER)
  companyId String
  company   Company @relation(fields: [companyId], references: [id])
}

model Company {
pkaewmanee@Phakkhapons-MacBook-Pro backend % npx prisma db pull

warn The configuration property `package.json#prisma` is deprecated and will be removed in Prisma 7. Please migrate to a Prisma config file (e.g., `prisma.config.ts`).
For more information, see: https://pris.ly/prisma-config

Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma
Datasource "db": PostgreSQL database "ncsdb", schema "public" at "localhost:5432"

âœ” Introspected 10 models and wrote them into prisma/schema.prisma in 97ms
      
Run prisma generate to generate Prisma Client.

pkaewmanee@Phakkhapons-MacBook-Pro backend % npx prisma generate
warn The configuration property `package.json#prisma` is deprecated and will be removed in Prisma 7. Please migrate to a Prisma config file (e.g., `prisma.config.ts`).
For more information, see: https://pris.ly/prisma-config

Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma

âœ” Generated Prisma Client (v6.16.2) to ./node_modules/@prisma/client in 106ms

Start by importing your Prisma Client (See: https://pris.ly/d/importing-client)

Tip: Interested in query caching in just a few lines of code? Try Accelerate today! https://pris.ly/tip-3-accelerate

pkaewmanee@Phakkhapons-MacBook-Pro backend % npm run build

> ncs-backend@0.1.0 prebuild
> npx prisma generate

warn The configuration property `package.json#prisma` is deprecated and will be removed in Prisma 7. Please migrate to a Prisma config file (e.g., `prisma.config.ts`).
For more information, see: https://pris.ly/prisma-config

Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma

âœ” Generated Prisma Client (v6.16.2) to ./node_modules/@prisma/client in 104ms

Start by importing your Prisma Client (See: https://pris.ly/d/importing-client)

Tip: Interested in query caching in just a few lines of code? Try Accelerate today! https://pris.ly/tip-3-accelerate


> ncs-backend@0.1.0 build
> nest build

prisma/seed.ts:8:32 - error TS2339: Property 'company' does not exist on type 'PrismaClient<PrismaClientOptions, LogLevel, DefaultArgs>'.

8   const company = await prisma.company.upsert({
                                 ~~~~~~~
prisma/seed.ts:23:34 - error TS2551: Property 'user' does not exist on type 'PrismaClient<PrismaClientOptions, LogLevel, DefaultArgs>'. Did you mean 'users'?

23   const adminUser = await prisma.user.upsert({
                                    ~~~~

  node_modules/.prisma/client/index.d.ts:333:7
    333   get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;
              ~~~~~
    'users' is declared here.
prisma/seed.ts:42:33 - error TS2551: Property 'user' does not exist on type 'PrismaClient<PrismaClientOptions, LogLevel, DefaultArgs>'. Did you mean 'users'?

42   const testUser = await prisma.user.upsert({
                                   ~~~~

  node_modules/.prisma/client/index.d.ts:333:7
    333   get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;
              ~~~~~
    'users' is declared here.
src/auth/auth.service.ts:16:36 - error TS2551: Property 'user' does not exist on type 'PrismaService'. Did you mean 'users'?

16     const user = await this.prisma.user.create({
                                      ~~~~

  node_modules/.prisma/client/index.d.ts:333:7
    333   get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;
              ~~~~~
    'users' is declared here.
src/auth/auth.service.ts:31:36 - error TS2551: Property 'user' does not exist on type 'PrismaService'. Did you mean 'users'?

31     const user = await this.prisma.user.findUnique({
                                      ~~~~

  node_modules/.prisma/client/index.d.ts:333:7
    333   get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;
              ~~~~~
    'users' is declared here.
src/products/products.service.ts:23:24 - error TS2551: Property 'product' does not exist on type 'PrismaService'. Did you mean 'products'?

23     return this.prisma.product.findMany({
                          ~~~~~~~

  node_modules/.prisma/client/index.d.ts:303:7
    303   get products(): Prisma.productsDelegate<ExtArgs, ClientOptions>;
              ~~~~~~~~
    'products' is declared here.
src/products/products.service.ts:30:24 - error TS2551: Property 'product' does not exist on type 'PrismaService'. Did you mean 'products'?

30     return this.prisma.product.findUnique({
                          ~~~~~~~

  node_modules/.prisma/client/index.d.ts:303:7
    303   get products(): Prisma.productsDelegate<ExtArgs, ClientOptions>;
              ~~~~~~~~
    'products' is declared here.
src/products/products.service.ts:37:24 - error TS2551: Property 'product' does not exist on type 'PrismaService'. Did you mean 'products'?

37     return this.prisma.product.create({
                          ~~~~~~~

  node_modules/.prisma/client/index.d.ts:303:7
    303   get products(): Prisma.productsDelegate<ExtArgs, ClientOptions>;
              ~~~~~~~~
    'products' is declared here.
src/products/products.service.ts:44:24 - error TS2551: Property 'product' does not exist on type 'PrismaService'. Did you mean 'products'?

44     return this.prisma.product.update({
                          ~~~~~~~

  node_modules/.prisma/client/index.d.ts:303:7
    303   get products(): Prisma.productsDelegate<ExtArgs, ClientOptions>;
              ~~~~~~~~
    'products' is declared here.

Found 9 error(s).

pkaewmanee@Phakkhapons-MacBook-Pro backend % sed -i '' 's/this\.prisma\.product/this.prisma.products/g' src/products/products.se
sed: src/products/products.se: No such file or directory
pkaewmanee@Phakkhapons-MacBook-Pro backend % sed -i '' 's/this\.prisma\.product/this.prisma.products/g' src/products/products.service.ts
pkaewmanee@Phakkhapons-MacBook-Pro backend % sed -i '' 's/this\.prisma\.user/this.prisma.users/g' src/auth/auth.service.ts
pkaewmanee@Phakkhapons-MacBook-Pro backend % sed -i '' 's/prisma\.user/prisma.users/g' prisma/seed.ts
sed -i '' 's/prisma\.company/prisma.companies/g' prisma/seed.ts
pkaewmanee@Phakkhapons-MacBook-Pro backend % npm run build

> ncs-backend@0.1.0 prebuild
> npx prisma generate

warn The configuration property `package.json#prisma` is deprecated and will be removed in Prisma 7. Please migrate to a Prisma config file (e.g., `prisma.config.ts`).
For more information, see: https://pris.ly/prisma-config

Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma

âœ” Generated Prisma Client (v6.16.2) to ./node_modules/@prisma/client in 102ms

Start by importing your Prisma Client (See: https://pris.ly/d/importing-client)

Tip: Interested in query caching in just a few lines of code? Try Accelerate today! https://pris.ly/tip-3-accelerate


> ncs-backend@0.1.0 build
> nest build

prisma/seed.ts:11:5 - error TS2322: Type '{ id: string; name: string; }' is not assignable to type '(Without<companiesCreateInput, companiesUncheckedCreateInput> & companiesUncheckedCreateInput) | (Without<...> & companiesCreateInput)'.
  Type '{ id: string; name: string; }' is not assignable to type 'Without<companiesUncheckedCreateInput, companiesCreateInput> & companiesCreateInput'.
    Property 'updated_at' is missing in type '{ id: string; name: string; }' but required in type 'companiesCreateInput'.

11     create: {
       ~~~~~~

  node_modules/.prisma/client/index.d.ts:14646:5
    14646     updated_at: Date | string
              ~~~~~~~~~~
    'updated_at' is declared here.
  node_modules/.prisma/client/index.d.ts:5172:5
    5172     create: XOR<companiesCreateInput, companiesUncheckedCreateInput>
             ~~~~~~
    The expected type comes from property 'create' which is declared here on type '{ select?: companiesSelect<DefaultArgs>; omit?: companiesOmit<DefaultArgs>; include?: companiesInclude<DefaultArgs>; where: companiesWhereUniqueInput; create: (Without<...> & companiesUncheckedCreateInput) | (Without<...> & companiesCreateInput); update: (Without<...> & companiesUncheckedUpdateInput) | (Without<...>...'
prisma/seed.ts:32:7 - error TS2561: Object literal may only specify known properties, but 'companyId' does not exist in type '(Without<usersCreateInput, usersUncheckedCreateInput> & usersUncheckedCreateInput) | (Without<...> & usersCreateInput)'. Did you mean to write 'company_id'?

32       companyId: company.id,
         ~~~~~~~~~

  node_modules/.prisma/client/index.d.ts:13365:5
    13365     create: XOR<usersCreateInput, usersUncheckedCreateInput>
              ~~~~~~
    The expected type comes from property 'create' which is declared here on type '{ select?: usersSelect<DefaultArgs>; omit?: usersOmit<DefaultArgs>; include?: usersInclude<DefaultArgs>; where: usersWhereUniqueInput; create: (Without<...> & usersUncheckedCreateInput) | (Without<...> & usersCreateInput); update: (Without<...> & usersUncheckedUpdateInput) | (Without<...> & usersUpdateInput); }'
prisma/seed.ts:51:7 - error TS2561: Object literal may only specify known properties, but 'companyId' does not exist in type '(Without<usersCreateInput, usersUncheckedCreateInput> & usersUncheckedCreateInput) | (Without<...> & usersCreateInput)'. Did you mean to write 'company_id'?

51       companyId: company.id,
         ~~~~~~~~~

  node_modules/.prisma/client/index.d.ts:13365:5
    13365     create: XOR<usersCreateInput, usersUncheckedCreateInput>
              ~~~~~~
    The expected type comes from property 'create' which is declared here on type '{ select?: usersSelect<DefaultArgs>; omit?: usersOmit<DefaultArgs>; include?: usersInclude<DefaultArgs>; where: usersWhereUniqueInput; create: (Without<...> & usersUncheckedCreateInput) | (Without<...> & usersCreateInput); update: (Without<...> & usersUncheckedUpdateInput) | (Without<...> & usersUpdateInput); }'
src/auth/auth.service.ts:21:9 - error TS2561: Object literal may only specify known properties, but 'companyId' does not exist in type '(Without<usersCreateInput, usersUncheckedCreateInput> & usersUncheckedCreateInput) | (Without<...> & usersCreateInput)'. Did you mean to write 'company_id'?

21         companyId,
           ~~~~~~~~~

  node_modules/.prisma/client/index.d.ts:13231:5
    13231     data: XOR<usersCreateInput, usersUncheckedCreateInput>
              ~~~~
    The expected type comes from property 'data' which is declared here on type '{ select?: usersSelect<DefaultArgs>; omit?: usersOmit<DefaultArgs>; include?: usersInclude<DefaultArgs>; data: (Without<...> & usersUncheckedCreateInput) | (Without<...> & usersCreateInput); }'
src/auth/auth.service.ts:24:18 - error TS2353: Object literal may only specify known properties, and 'company' does not exist in type 'usersInclude<DefaultArgs>'.

24       include: { company: true },
                    ~~~~~~~

  node_modules/.prisma/client/index.d.ts:13227:5
    13227     include?: usersInclude<ExtArgs> | null
              ~~~~~~~
    The expected type comes from property 'include' which is declared here on type '{ select?: usersSelect<DefaultArgs>; omit?: usersOmit<DefaultArgs>; include?: usersInclude<DefaultArgs>; data: (Without<...> & usersUncheckedCreateInput) | (Without<...> & usersCreateInput); }'
src/auth/auth.service.ts:33:18 - error TS2353: Object literal may only specify known properties, and 'company' does not exist in type 'usersInclude<DefaultArgs>'.

33       include: { company: true },
                    ~~~~~~~

  node_modules/.prisma/client/index.d.ts:13032:5
    13032     include?: usersInclude<ExtArgs> | null
              ~~~~~~~
    The expected type comes from property 'include' which is declared here on type '{ select?: usersSelect<DefaultArgs>; omit?: usersOmit<DefaultArgs>; include?: usersInclude<DefaultArgs>; where: usersWhereUniqueInput; }'
src/products/products.service.ts:25:18 - error TS2353: Object literal may only specify known properties, and 'category' does not exist in type 'productsInclude<DefaultArgs>'.

25       include: { category: true },
                    ~~~~~~~~

  node_modules/.prisma/client/index.d.ts:9714:5
    9714     include?: productsInclude<ExtArgs> | null
             ~~~~~~~
    The expected type comes from property 'include' which is declared here on type '{ select?: productsSelect<DefaultArgs>; omit?: productsOmit<DefaultArgs>; include?: productsInclude<DefaultArgs>; ... 5 more ...; distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]; }'
src/products/products.service.ts:32:18 - error TS2353: Object literal may only specify known properties, and 'category' does not exist in type 'productsInclude<DefaultArgs>'.

32       include: { category: true },
                    ~~~~~~~~

  node_modules/.prisma/client/index.d.ts:9566:5
    9566     include?: productsInclude<ExtArgs> | null
             ~~~~~~~
    The expected type comes from property 'include' which is declared here on type '{ select?: productsSelect<DefaultArgs>; omit?: productsOmit<DefaultArgs>; include?: productsInclude<DefaultArgs>; where: productsWhereUniqueInput; }'
src/products/products.service.ts:39:18 - error TS2353: Object literal may only specify known properties, and 'category' does not exist in type 'productsInclude<DefaultArgs>'.

39       include: { category: true },
                    ~~~~~~~~

  node_modules/.prisma/client/index.d.ts:9761:5
    9761     include?: productsInclude<ExtArgs> | null
             ~~~~~~~
    The expected type comes from property 'include' which is declared here on type '{ select?: productsSelect<DefaultArgs>; omit?: productsOmit<DefaultArgs>; include?: productsInclude<DefaultArgs>; data: (Without<...> & productsUncheckedCreateInput) | (Without<...> & productsCreateInput); }'
src/products/products.service.ts:47:18 - error TS2353: Object literal may only specify known properties, and 'category' does not exist in type 'productsInclude<DefaultArgs>'.

47       include: { category: true },
                    ~~~~~~~~

  node_modules/.prisma/client/index.d.ts:9817:5
    9817     include?: productsInclude<ExtArgs> | null
             ~~~~~~~
    The expected type comes from property 'include' which is declared here on type '{ select?: productsSelect<DefaultArgs>; omit?: productsOmit<DefaultArgs>; include?: productsInclude<DefaultArgs>; data: (Without<...> & productsUncheckedUpdateInput) | (Without<...> & productsUpdateInput); where: productsWhereUniqueInput; }'

Found 10 error(s).

pkaewmanee@Phakkhapons-MacBook-Pro backend % sed -i '' 's/companyId/company_id/g' src/auth/auth.service.ts
sed -i '' 's/companyId/company_id/g' prisma/seed.ts

pkaewmanee@Phakkhapons-MacBook-Pro backend % sed -i '' 's/{ company: true }/{ companies: true }/g' src/auth/auth.service.ts
sed -i '' 's/{ category: true }/{ categories: true }/g' src/products/products.service.ts

pkaewmanee@Phakkhapons-MacBook-Pro backend % sed -i '' 's/name: "Default Company"/name: "Default Company",\n      updated_at: new Date()/g' prisma/seed.ts
pkaewmanee@Phakkhapons-MacBook-Pro backend % npm run build

> ncs-backend@0.1.0 prebuild
> npx prisma generate

warn The configuration property `package.json#prisma` is deprecated and will be removed in Prisma 7. Please migrate to a Prisma config file (e.g., `prisma.config.ts`).
For more information, see: https://pris.ly/prisma-config

Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma

âœ” Generated Prisma Client (v6.16.2) to ./node_modules/@prisma/client in 108ms

Start by importing your Prisma Client (See: https://pris.ly/d/importing-client)

Tip: Need your database queries to be 1000x faster? Accelerate offers you that and more: https://pris.ly/tip-2-accelerate


> ncs-backend@0.1.0 build
> nest build

prisma/seed.ts:11:5 - error TS2322: Type '{ id: string; name: string; }' is not assignable to type '(Without<companiesCreateInput, companiesUncheckedCreateInput> & companiesUncheckedCreateInput) | (Without<...> & companiesCreateInput)'.
  Type '{ id: string; name: string; }' is not assignable to type 'Without<companiesUncheckedCreateInput, companiesCreateInput> & companiesCreateInput'.
    Property 'updated_at' is missing in type '{ id: string; name: string; }' but required in type 'companiesCreateInput'.

11     create: {
       ~~~~~~

  node_modules/.prisma/client/index.d.ts:14646:5
    14646     updated_at: Date | string
              ~~~~~~~~~~
    'updated_at' is declared here.
  node_modules/.prisma/client/index.d.ts:5172:5
    5172     create: XOR<companiesCreateInput, companiesUncheckedCreateInput>
             ~~~~~~
    The expected type comes from property 'create' which is declared here on type '{ select?: companiesSelect<DefaultArgs>; omit?: companiesOmit<DefaultArgs>; include?: companiesInclude<DefaultArgs>; where: companiesWhereUniqueInput; create: (Without<...> & companiesUncheckedCreateInput) | (Without<...> & companiesCreateInput); update: (Without<...> & companiesUncheckedUpdateInput) | (Without<...>...'
prisma/seed.ts:28:5 - error TS2322: Type '{ email: string; password: string; name: string; company_id: string; role: "ADMIN"; }' is not assignable to type '(Without<usersCreateInput, usersUncheckedCreateInput> & usersUncheckedCreateInput) | (Without<...> & usersCreateInput)'.
  Type '{ email: string; password: string; name: string; company_id: string; role: "ADMIN"; }' is not assignable to type 'Without<usersUncheckedCreateInput, usersCreateInput> & usersCreateInput'.
    Type '{ email: string; password: string; name: string; company_id: string; role: "ADMIN"; }' is not assignable to type 'Without<usersUncheckedCreateInput, usersCreateInput>'.
      Types of property 'company_id' are incompatible.
        Type 'string' is not assignable to type 'never'.

28     create: {
       ~~~~~~

  node_modules/.prisma/client/index.d.ts:13365:5
    13365     create: XOR<usersCreateInput, usersUncheckedCreateInput>
              ~~~~~~
    The expected type comes from property 'create' which is declared here on type '{ select?: usersSelect<DefaultArgs>; omit?: usersOmit<DefaultArgs>; include?: usersInclude<DefaultArgs>; where: usersWhereUniqueInput; create: (Without<...> & usersUncheckedCreateInput) | (Without<...> & usersCreateInput); update: (Without<...> & usersUncheckedUpdateInput) | (Without<...> & usersUpdateInput); }'
prisma/seed.ts:47:5 - error TS2322: Type '{ email: string; password: string; name: string; company_id: string; role: "USER"; }' is not assignable to type '(Without<usersCreateInput, usersUncheckedCreateInput> & usersUncheckedCreateInput) | (Without<...> & usersCreateInput)'.
  Type '{ email: string; password: string; name: string; company_id: string; role: "USER"; }' is not assignable to type 'Without<usersUncheckedCreateInput, usersCreateInput> & usersCreateInput'.
    Type '{ email: string; password: string; name: string; company_id: string; role: "USER"; }' is not assignable to type 'Without<usersUncheckedCreateInput, usersCreateInput>'.
      Types of property 'company_id' are incompatible.
        Type 'string' is not assignable to type 'never'.

47     create: {
       ~~~~~~

  node_modules/.prisma/client/index.d.ts:13365:5
    13365     create: XOR<usersCreateInput, usersUncheckedCreateInput>
              ~~~~~~
    The expected type comes from property 'create' which is declared here on type '{ select?: usersSelect<DefaultArgs>; omit?: usersOmit<DefaultArgs>; include?: usersInclude<DefaultArgs>; where: usersWhereUniqueInput; create: (Without<...> & usersUncheckedCreateInput) | (Without<...> & usersCreateInput); update: (Without<...> & usersUncheckedUpdateInput) | (Without<...> & usersUpdateInput); }'
src/auth/auth.service.ts:17:7 - error TS2322: Type '{ email: string; password: string; name: string; company_id: string; role: "USER"; }' is not assignable to type '(Without<usersCreateInput, usersUncheckedCreateInput> & usersUncheckedCreateInput) | (Without<...> & usersCreateInput)'.
  Type '{ email: string; password: string; name: string; company_id: string; role: "USER"; }' is not assignable to type 'Without<usersUncheckedCreateInput, usersCreateInput> & usersCreateInput'.
    Type '{ email: string; password: string; name: string; company_id: string; role: "USER"; }' is not assignable to type 'Without<usersUncheckedCreateInput, usersCreateInput>'.
      Types of property 'company_id' are incompatible.
        Type 'string' is not assignable to type 'never'.

17       data: {
         ~~~~

  node_modules/.prisma/client/index.d.ts:13231:5
    13231     data: XOR<usersCreateInput, usersUncheckedCreateInput>
              ~~~~
    The expected type comes from property 'data' which is declared here on type '{ select?: usersSelect<DefaultArgs>; omit?: usersOmit<DefaultArgs>; include?: usersInclude<DefaultArgs>; data: (Without<...> & usersUncheckedCreateInput) | (Without<...> & usersCreateInput); }'

Found 4 error(s).

pkaewmanee@Phakkhapons-MacBook-Pro backend % 
